@using Dybi.App.Services;
@using Web.Models;
@using System.IO;
@inject IToastService ToastService;
@inject IWarehouseApiClient WarehouseApiClient;
@inject IJSRuntime JS

@if (ShowDialog)
{
    <div class="modal fade show d-block" id="assignModel" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <EditForm Model="Model" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Thêm sản phẩm</h5>
                        <button type="button" class="close" data-dismiss="modal" @onclick="()=>Hide()" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group mb-3">
                            <div class="input-group input-group-sm">
                                <label class="input-group-text">Mã sản phẩm:</label>
                                <InputText id="productCreateCode" class="form-control form-control-sm" @bind-Value="Model.Code"></InputText>
                            </div>
                            <ValidationMessage For="()=> Model.Code"></ValidationMessage>
                        </div>
                        <div class="form-group mb-3">
                            <div class="input-group input-group-sm">
                                <label class="input-group-text">Tên</label>
                                <InputText class="form-control form-control-sm" @bind-Value="Model.Title"></InputText>
                            </div>
                            <ValidationMessage For="()=> Model.Title"></ValidationMessage>
                        </div>
                        <div class="form-group mb-3">
                            <div class="input-group input-group-sm">
                                <label class="input-group-text">Danh mục</label>
                                <InputSelect class="form-control form-control-sm" @bind-Value="Model.CategoryId">
                                    <option value="">Chọn danh mục</option>
                                    @foreach (var category in ListCategories)
                                    {
                                        <option value="@category.Id">@category.Title</option>
                                    }
                                </InputSelect>
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => CreateCategory.Show()">+</button>
                            </div>
                            <ValidationMessage For="()=>Model.CategoryId"></ValidationMessage>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary btn-sm" @onclick="()=>Hide()" data-dismiss="modal">Đóng</button>
                        <button type="submit" class="btn btn-primary btn-sm">Thêm</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
    <CategoryCreate @ref="CreateCategory" ListCategories="ListCategories" CloseEventCallbak="LoadData"></CategoryCreate>
}

@code {
    protected bool ShowDialog { get; set; }

    private WarehouseProductDto Model { set; get; } = new WarehouseProductDto();

    public List<WarehouseCategoryDto> ListCategories { get; set; }

    [Parameter]
    public EventCallback<WarehouseProductDto> CloseEventCallbak { get; set; }

    protected CategoryCreate CreateCategory { set; get; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    public async Task LoadData()
    {
        ListCategories = await WarehouseApiClient.GetCategories();
        ListCategories = SortTable(ListCategories, null, "", "---");
    }

    public async Task Show()
    {
        ShowDialog = true;
        Model.Id = Guid.NewGuid();
        StateHasChanged();
        await JS.InvokeVoidAsync("setFocus", "#productCreateCode");
    }

    private void Hide()
    {
        ShowDialog = false;
        StateHasChanged();
    }

    protected async Task HandleSubmit()
    {
        var result = await WarehouseApiClient.CreateProduct(Model);
        if (result)
        {
            ShowDialog = false;
            await CloseEventCallbak.InvokeAsync(Model);
            ToastService.ShowInfo("Thêm Sản phẩm thành công");
        }
        else
        {
            ToastService.ShowError("Thêm Sản phẩm không thành công");
        }
    }

    private List<WarehouseCategoryDto> SortTable(List<WarehouseCategoryDto> table, Guid? parentId, string space = "", string distance = "....")
    {
        var rows = table.Where(dto => dto.ParentId == parentId).ToList();
        if (!rows.Any()) return new List<WarehouseCategoryDto>();
        var sortData = new List<WarehouseCategoryDto>();
        foreach (var row in rows)
        {
            var spaceNext = space + distance;
            var dt = SortTable(table, row.Id, spaceNext, distance);
            row.Title = space + row.Title;
            //row.Title = space + row.Title;
            sortData.Add(row);

            if (dt.Count > 0) sortData.AddRange(dt);
        }
        return sortData;
    }
}