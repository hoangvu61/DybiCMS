@using Web.Models;
@using System.IO;
@using Web.Models.Enums
@using Dybi.App.Services;
@using Dybi.App.Pages.Warehouses.Components
@using Dybi.App.Pages.Settings.Components

@inject IToastService ToastService;
@inject IWarehouseApiClient WarehouseApiClient;
@inject IDebtApiClient DebtApiClient;
@inject IJSRuntime JS

@if (ShowDialog)
{
    <div class="modal fade show d-block" id="assignModel" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Trả nợ cho nhà cung cấp</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="()=>Hide(false)" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <EditForm Model="Model" OnValidSubmit="HandleSubmit">
                    <div class="modal-body">
                        <div class="form-group mb-2">
                            <div class="input-group input-group-xs">
                                <span class="input-group-text">Nhà cung cấp:</span>
                                <InputSelect class="form-select" @bind-Value="Model.DebtorOrCreditor_Id">
                                    <option value="">Chọn nhà cung cấp</option>
                                    @foreach (var supplier in Suppliers)
                                    {
                                        <option value="@supplier.Id">@supplier.Name</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="input-group input-group-xs mb-2">
                            <span class="input-group-text">Trả</span>
                            <InputNumber id="inputRepayment" class="form-control" @bind-Value="Model.Repayment" @bind-Value:format="N0"/>
                            <span class="input-group-text"><sup>đ</sup></span>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary btn-xs" @onclick="()=>Hide(false)" data-dismiss="modal">Đóng</button>
                        <button type="submit" class="btn btn-primary btn-xs">Thêm</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    protected bool ShowDialog { get; set; }

    private DebtRequest Model { set; get; } = new DebtRequest();
    private List<WarehouseSupplierDto> Suppliers { set; get; }
    private DebtDto Dept { set; get; } = new DebtDto();

    [Parameter]
    public EventCallback CloseEventCallback { set; get; }

    protected async override Task OnInitializedAsync()
    {
        Suppliers = await WarehouseApiClient.GetSuppliers();
    }

    public async Task Show()
    {
        ShowDialog = true;
        StateHasChanged(); 
        await JS.InvokeVoidAsync("setFocus", "#inputRepayment");
    }
    public async Task Show(DebtDto debt)
    {
        Dept = debt;
        Model.DebtorOrCreditor_Id = debt.DebtorOrCreditor_Id;
        Model.Repayment = debt.TotalDebt;
        await Show();
    }

    private async Task Hide(bool callback)
    {
        if (callback) await CloseEventCallback.InvokeAsync();

        ShowDialog = false;
        StateHasChanged();
    }

    protected async Task HandleSubmit()
    {
        if (Model.Repayment > 0)
        {
            var result = await DebtApiClient.CreateSupplierDebt(Model);
            if (string.IsNullOrEmpty(result))
            {
                ToastService.ShowInfo("Thêm trả nợ thành công");
                await Hide(true);
            }
            else
            {
                ToastService.ShowError(result);
            }
        }
    }
}