@using Dybi.App.Services;
@using Web.Models;
@using System.IO;
@using Web.Models.Enums;
@using Web.Models.SeedWork;

@inject IWarehouseApiClient WarehouseApiClient;

<div class="form-group">
    <div class="input-group input-group-xs mb-3">
        <span class="input-group-text">Từ ngày</span>
        <input class="form-control" type="date" value="@Model.FromDate?.ToString("dd/MM/yyyy")" @onchange="@(() => OnSearch.InvokeAsync(Model))" />
        <span class="input-group-text">Đến ngày</span>
        <input class="form-control" type="date" value="@Model.ToDate?.ToString("dd/MM/yyyy")" @onchange="@(() => OnSearch.InvokeAsync(Model))" />
        <InputSelect class="form-select" ValueExpression="@(()=>Model.DebtorOrCreditor_Id)"
                     Value="@Model.DebtorOrCreditor_Id"
                     ValueChanged="@((Guid? value) => SupplierChange(value))">
            <option value="@Guid.Empty">Chọn nhà cung cấp</option>
            @if (Suppliers != null)
            {
                @foreach (var item in Suppliers)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            }
        </InputSelect>
        <InputSelect class="form-select" ValueExpression="@(()=>Model.Type)"
                     Value="@Model.Type"
                     ValueChanged="@((int value) => TypeChange(value))">
            <option value="0">Chọn loại</option>
            <option value="1">Nợ</option>
            <option value="2">Trả nợ</option>
        </InputSelect>
        <button class="btn btn-outline-secondary" type="button" @onclick="Search">Tìm</button>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<DebtSupplierSearch> OnSearch { set; get; }

    private DebtSupplierSearch Model = new DebtSupplierSearch();

    private List<WarehouseSupplierDto> Suppliers { set; get; }

    protected async override Task OnInitializedAsync()
    {
        Suppliers = await WarehouseApiClient.GetSuppliers();
    }

    private async Task SupplierChange(Guid? value)
    {
        Model.DebtorOrCreditor_Id = value;
        await OnSearch.InvokeAsync(Model);
    }

    private async Task TypeChange(int value)
    {
        Model.Type = value;
        await OnSearch.InvokeAsync(Model);
    }

    private async Task Search()
    {
        await OnSearch.InvokeAsync(Model);
    }
}