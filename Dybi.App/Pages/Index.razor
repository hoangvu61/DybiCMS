@page "/"
@attribute [Authorize]

@using Dybi.App.Pages.Components
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization
@using Dybi.App.Services;
@using MudBlazor
@using Web.Models;
@using Microsoft.Extensions.Configuration
@using Web.Models.Enums;
@using Web.Models.SeedWork;

@inject NavigationManager NavigationManager
@inject IConfiguration Configuration;
@inject IOrderApiClient OrderApiClient;
@inject IWarehouseApiClient WarehouseApiClient;
@inject IDebtApiClient DebtApiClient;
@inject GlobalVariables Global;

<h1 class="text-center">Phần mềm quản lý Bán hàng - Xuất nhập kho</h1>
<section>
    <div class="row mb-5">
        <div class="col">
            <!-- small box -->
            <div class="small-box bg-warning">
                <div class="inner">
                    <h3>@NewOrder</h3>
                    <p>Đơn hàng mới</p>
                </div>
                <div class="icon">
                    <span class="oi oi-cart"></span>
                </div>
                <a href="/Sales/Orders" class="small-box-footer">Chi tiết <span class="oi oi-arrow-circle-right"></span></a>
            </div>
        </div>
        <div class="col">
            <!-- small box -->
            <div class="small-box bg-danger">
                <div class="inner">
                    <h3>@Inventory</h3>
                    <p>Hàng tồn sắp hết</p>
                </div>
                <div class="icon">
                    <span class="oi oi-bell"></span>
                </div>
                <a href="/warehouses/Inventories?IsAlertEmpty=true" class="small-box-footer">Chi tiết <span class="oi oi-arrow-circle-right"></span></a>
            </div>
        </div>
        <div class="col">
            <!-- small box -->
            <div class="small-box bg-primary" style="height:100%">
                <a class="button" href="sales/ordercreate">
                    <i class="oi oi-plus"></i>
                    <span class="small-box-footer">Tạo đơn hàng</span>
                </a>
            </div>
        </div>
    </div>
    
    <div class="row">
        <div class="col-9">
            <h2>Tình hình tài chính</h2>

            <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>

            @if (COGS != null && COGS.Any())
            {
                <table class="table table-sm table-striped table-bordered">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Giá vốn hàng hóa</th>
                            <th>Doanh thu</th>
                            <th>Lợi nhuận gộp</th>
                            <th>Chi phí</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = MinId; i <= COGS.Last().Id; i++)
                        {
                            <tr>
                                <td>@COGS.First(e => e.Id == i).Title</td>
                                <td style="text-align:right">@COGS.First(e => e.Id == i).TotalAmount.ToString("N0")<sup>đ</sup></td>
                                <td style="text-align:right">@Revenue.First(e => e.Id == i).TotalAmount.ToString("N0")<sup>đ</sup></td>
                                <td style="text-align:right">@GrossProfit.First(e => e.Id == i).TotalAmount.ToString("N0")<sup>đ</sup></td>
                                <td style="text-align:right">@Expensive.First(e => e.Id == i).TotalAmount.ToString("N0")<sup>đ</sup></td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
        <div class="col-3">
            @if (StatisticInStage != null)
            {
                <div class="card mt-3 mb-5">
                    <div class="card-header bg-info">Thống kê trong kỳ</div>
                    <table class="table table-sm table-striped mb-0">
                        <tbody>
                            <tr>
                                <td>Giá vốn hàng hóa</td>
                                <td style="text-align:right">@StatisticInStage.CostofGoodsSold.ToString("N0")<sup>đ</sup></td>
                            </tr>
                            <tr>
                                <td>Doanh thu</td>
                                <td style="text-align:right">@StatisticInStage.Revenue.ToString("N0")<sup>đ</sup></td>
                            </tr>
                            <tr>
                                <td>Lợi nhuận gộp</td>
                                <td style="text-align:right">@StatisticInStage.GrossProfit.ToString("N0")<sup>đ</sup></td>
                            </tr>
                            <tr>
                                <td>Chí phí</td>
                                <td style="text-align:right">@StatisticInStage.Expenses.ToString("N0")<sup>đ</sup></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            }

            @if (StatisticTotal != null)
            {
                <div class="card mb-5">
                    <div class="card-header bg-info">Đến thời điểm hiện tại</div>
                    <table class="table table-sm table-striped mb-0">
                        <tbody>
                            <tr>
                                <td>Giá vốn hàng hóa</td>
                                <td style="text-align:right">@StatisticTotal.CostofGoodsSold.ToString("N0")<sup>đ</sup></td>
                            </tr>
                            <tr>
                                <td>Doanh thu</td>
                                <td style="text-align:right">@StatisticTotal.Revenue.ToString("N0")<sup>đ</sup></td>
                            </tr>
                            <tr>
                                <td>Lợi nhuận gộp</td>
                                <td style="text-align:right">@StatisticTotal.GrossProfit.ToString("N0")<sup>đ</sup></td>
                            </tr>
                            <tr>
                                <td>Chí phí</td>
                                <td style="text-align:right">@StatisticTotal.Expenses.ToString("N0")<sup>đ</sup></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            }

            @if (Debts != null)
            {
                <div class="card mt-3 mb-5">
                    <div class="card-header bg-info">Công nợ</div>
                    <table class="table table-sm table-striped mb-0">
                        <tbody>
                            <tr>
                                <td>Nợ phải thu</td>
                                <td style="text-align:right">@Debts.AccountsReceivable.ToString("N0")<sup>đ</sup></td>
                            </tr>
                            <tr>
                                <td>Nợ phải trả</td>
                                <td style="text-align:right">@Debts.AccountsPayable.ToString("N0")<sup>đ</sup></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</section>
<SetConfig @ref="SetConfigDialog"></SetConfig>

@code {
    private PagingParameters NewOrderPaging = new PagingParameters();
    private WarehouseInventorySearch WarehouseInventorySearch = new WarehouseInventorySearch();

    private int NewOrder { get; set; }
    private int Inventory { get; set; }
    private ReportStatisticDto StatisticInStage { get; set; }
    private ReportStatisticDto StatisticTotal { get; set; }
    private ReportDebtDto Debts { get; set; }
    private List<MoneyAccountingDto> COGS { get; set; }
    private List<MoneyAccountingDto> Revenue { get; set; }
    private List<MoneyAccountingDto> Expensive { get; set; }
    private List<MoneyAccountingDto> GrossProfit { get; set; }

    private List<ChartSeries> Series { get; set; } = new List<ChartSeries>();
    private string[] XAxisLabels = { };
    private int MinId { get; set; }

    private SetConfig SetConfigDialog { set; get; }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var pagingOrderResponse = await OrderApiClient.GetNewOrders(NewOrderPaging);
            NewOrder = pagingOrderResponse.MetaData.TotalCount;
        }
        catch (Exception ex)
        {
            if (ex.Message != null && ex.Message.Contains("Unauthorized"))
                NavigationManager.NavigateTo("Logout");
        }

        WarehouseInventorySearch.IsAlertEmpty = true;
        var inventoryResponse = await WarehouseApiClient.GetInventories(WarehouseInventorySearch);
        Inventory = inventoryResponse.MetaData.TotalCount;

        var taskStatisticInStage = WarehouseApiClient.GetStatisticCurrent();
        var taskStatisticTotal = WarehouseApiClient.GetStatisticTotal();
        var taskDebts = DebtApiClient.GetReportDebts();

        var taskCogs = WarehouseApiClient.GetReportCostOfGrossSoldStage();
        var taskRevenue = WarehouseApiClient.GetReportRevenueStage();
        var taskExpensive = WarehouseApiClient.GetReportExpensiveStage();

        await Task.WhenAll(taskCogs, taskRevenue, taskExpensive);

        StatisticInStage = await taskStatisticInStage;
        StatisticTotal = await taskStatisticTotal;
        Debts = await taskDebts;

        COGS = await taskCogs;
        Revenue = await taskRevenue;
        Expensive = await taskExpensive;

        var firstCogs = COGS.FirstOrDefault(e => e.TotalAmount > 0);
        var firstRevenue = Revenue.FirstOrDefault(e => e.TotalAmount > 0);
        var firstExpensive = Expensive.FirstOrDefault(e => e.TotalAmount > 0);

        if (firstCogs != null) MinId = firstCogs.Id;
        if (firstRevenue != null && firstRevenue.Id < MinId) MinId = firstRevenue.Id;
        if (firstExpensive != null && firstExpensive.Id < MinId) MinId = firstExpensive.Id;
        if (MinId > 0)
        {
            COGS = COGS.Where(e => MinId <= e.Id).ToList();
            Revenue = Revenue.Where(e => MinId <= e.Id).ToList();
            Expensive = Expensive.Where(e => MinId <= e.Id).ToList();
        }

        GrossProfit = COGS.Join(Revenue, c => c.Id, p => p.Id, (c, p) => new MoneyAccountingDto { Id = c.Id, Title = c.Title, Date = c.Date, TotalAmount = p.TotalAmount - c.TotalAmount }).ToList();

        XAxisLabels = COGS.Select(e => e.Date).ToArray();
        Series = new List<ChartSeries>()
        {
            new ChartSeries() { Name = "Giá vốn hàng hóa", Data = COGS.Select(e => (double)e.TotalAmount).ToArray() },
            new ChartSeries() { Name = "Doanh thu", Data = Revenue.Select(e => (double)e.TotalAmount).ToArray() },
            new ChartSeries() { Name = "Lợi nhuận gộp", Data = GrossProfit.Select(e => (double)e.TotalAmount).ToArray() },
            new ChartSeries() { Name = "Chi phí", Data = Expensive.Select(e => (double)e.TotalAmount).ToArray() },
        };
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            if (Global.Configs == null) Global.Configs = await WarehouseApiClient.GetConfigs();
            if (Global.Configs.Count == 0)
            {
                SetConfigDialog.Show();
            }
        }
    }
}