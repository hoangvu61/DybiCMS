@page "/settings/products/{Id}"
@attribute [Authorize]

@using Blazored.TextEditor
@using Microsoft.AspNetCore.Authorization;
@using Dybi.App.Components
@using Dybi.App.Pages.Components
@using Dybi.App.Pages.Settings.Components
@using Dybi.App.Services;
@using Web.Models;
@using Web.Models.Enums
@using Web.Models.SeedWork;
@using Microsoft.Extensions.Configuration

@inject IConfiguration Configuration
@inject IToastService ToastService;
@inject IWarehouseApiClient WarehouseApiClient;
@inject IWebsiteApiClient WebsiteApiClient;

 @if (Model== null)
{
    <LoadingIndicator></LoadingIndicator>
}
else
{
    <h1 class="m-0">@Model.Title</h1>

    <section class="content">
        <SEOItem @ref="SEOItemControl" LanguageCode="@Model.LanguageCode" ItemId="@Model.Id"></SEOItem>

        <EditForm Model="Model" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="card card-outline card-info mt-3">
                <div class="card-header">
                    <h3 class="card-title">@Model.Title</h3>
                    <div style="float:right">
                        <button type="submit" class="btn btn-success btn-sm">Lưu</button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-7">
                            <div class="info-box bg-light mb-2">
                                <div class="info-box-content">
                                    <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Ngày tạo: </lable> @Model.CreateDate.ToString(Configuration["DateTimeFormat"])</span>
                                    <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Lượt xem: </lable> @Model.View</span>
                                </div>
                            </div>
                            <div class="form-group mb-2">
                                <div class="input-group input-group-xs" style="font-weight:bold">
                                    <span class="input-group-text">Tiêu đề</span>
                                    <InputText class="form-control" @bind-Value="Model.Title"></InputText>
                                </div>
                                <ValidationMessage For="()=> Model.Title"></ValidationMessage>
                            </div>
                            <div class="form-group mb-2">
                                <div class="input-group input-group-xs" style="font-weight:bold">
                                    <span class="input-group-text">Mã sản phẩm</span>
                                    <InputText class="form-control" @bind-Value="Model.Code"></InputText>
                                </div>
                                <ValidationMessage For="()=> Model.Code"></ValidationMessage>
                            </div>
                            <div class="form-group mb-2">
                                <div class="input-group input-group-xs">
                                    <span class="input-group-text">Danh mục</span>
                                    <InputSelect class="form-select" ValueExpression="@(()=>Model.CategoryId)"
                                                Value="@Model.CategoryId"
                                                ValueChanged="@((Guid value) => OnCategoryChanged(value))">
                                        @foreach (var category in Categories)
                                        {
                                            <option value="@category.Id">@category.Title</option>
                                        }
                                    </InputSelect>
                                    <button class="btn btn-outline-secondary" type="button" @onclick="() => CreateCategory.Show()">+</button>
                                </div>
                                <ValidationMessage For="()=>Model.CategoryId"></ValidationMessage>
                            </div>
                            <div class="form-group mb-2">
                                <div class="input-group input-group-xs">
                                    <span class="input-group-text">Giá</span>
                                    <InputNumber class="form-control" @bind-Value="Model.Price" @bind-Value:format="N0"></InputNumber>
                                </div>
                            </div>
                            <div class="from-group mb-2">
                                <label>Giảm giá:</label>
                                <div class="form-check form-check-inline">
                                    @foreach (var discount in DataSource.DiscountTypes)
                                    {
                                        <input name="discount" type="radio" class="form-check-input" @onchange="@(() => {Model.DiscountType = discount.Key;})" checked="@(Model.DiscountType == discount.Key)" />
                                        @discount.Value
                                    }
                                </div>
                                @if (Model.DiscountType > 0)
                                {
                                    <div class="input-group input-group-xs mb-3">
                                        @if (Model.DiscountType == 1 || Model.DiscountType == 2)
                                        {
                                            <span class="input-group-text">Giảm</span>
                                        }
                                        else if (Model.DiscountType == 3)
                                        {
                                            <span class="input-group-text">Giá bán</span>
                                        }
                                        <InputNumber class="form-control" @bind-Value="Model.Discount" @bind-Value:format="N0"></InputNumber>
                                        <ValidationMessage For="()=>Model.Discount"></ValidationMessage>
                                        @if (Model.DiscountType == 1)
                                        {
                                            <span class="input-group-text">(%) Còn @((Model.Price - (Model.Discount * Model.Price / 100)).ToString("N0"))</span>
                                        }
                                        else if (Model.DiscountType == 2)
                                        {
                                            <span class="input-group-text">Còn @((Model.Price - Model.Discount).ToString("N0"))</span>
                                        }
                                    </div>
                                }
                            </div>
                            <div class="form-group mb-2">
                                <div class="input-group input-group-xs mb-1">
                                    <span class="input-group-text">Thứ tự</span>
                                    <InputNumber class="form-control" @bind-Value="Model.Order"></InputNumber>
                                </div>
                                <div class="row">
                                    <div class="col"><label class="form-check-label">Hoạt dộng:</label></div>
                                    <div class="col" style="text-align:right"><input type="checkbox" checked="@Model.IsPuslished" class="form-check-input" role="switch" @onchange="@((e) => {Model.IsPuslished = bool.Parse(e.Value.ToString()); ApplyChanged();})"></input></div>
                                </div>
                            </div>
                            <div class="form-group mb-2">
                                <div class="tags">
                                    <label>Tags: </label>
                                    @foreach (var tag in Model.Tags)
                                    {
                                        <span class="tag">
                                            @tag <img src="remove.png" @onclick="() => Model.Tags.Remove(tag)" />
                                        </span>
                                    }
                                    <div class="input-group input-group-xs" style="margin:0 !important">
                                        <span class="input-group-text">Thêm Tag:</span>
                                        <input class="form-control" list="tags" value="@Tag" @onchange="@(e => Tag = e.Value.ToString())" />
                                        @if (Tags != null)
                                        {
                                            <datalist id="tags">
                                                @foreach (var tag in Tags)
                                                {
                                                    <option value="@tag"></option>
                                                }
                                            </datalist>
                                        }
                                        <button class="btn btn-outline-secondary" type="button" @onclick="() =>{ if(!Model.Tags.Contains(Tag)) Model.Tags.Add(Tag); Tag = string.Empty; }">+</button>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group mb-2">
                                <label>Mô tả ngắn:</label>
                                <InputTextArea @bind-Value="Model.Brief" class="form-control form-control-sm" style="height:200px"></InputTextArea>
                                <ValidationMessage For="()=> Model.Brief"></ValidationMessage>
                            </div>
                        </div>
                        <div class="col-md-5">
                            <div class="form-group">
                                <label for="InputFileLogo">Hình:</label>
                                <InputFile id="InputFileLogo" type="file" OnChange="LogoChange" accept="image/png, image/jpeg, image/gif"></InputFile>
                                @if (Model.Image != null && !string.IsNullOrEmpty(Model.Image.FileName))
                                {
                                    <img src="@(BackendApiUrl + "/" + Model.Image.FullPath + "?DummyId=" + DateTime.Now.Ticks)" asp-append-version="true" width="100%" />
                                }
                            </div>
                            <ImageList ItemId="Model.Id"></ImageList>
                            <AttributeList @ref="ProductAttributeListControl" ProductId="Model.Id" LanguageCode="@Model.LanguageCode" CategoryId="Model.CategoryId"></AttributeList>
                        </div>
                        <div class="col-md-12">
                            <div class="form-group">
                                <label>Mô tả chi tiết:</label>
                                <BlazoredTextEditor @ref="@QuillHtml">
                                    <ToolbarContent>
                                        <select class="ql-header">
                                            <option selected=""></option>
                                            <option value="2"></option>
                                            <option value="3"></option>
                                            <option value="4"></option>
                                            <option value="5"></option>
                                        </select>
                                        <span class="ql-formats">
                                            <button class="ql-bold"></button>
                                            <button class="ql-italic"></button>
                                            <button class="ql-underline"></button>
                                            <button class="ql-strike"></button>
                                        </span>
                                        <span class="ql-formats">
                                            <select class="ql-color"></select>
                                            <select class="ql-background"></select>
                                        </span>
                                        <span class="ql-formats">
                                            <button class="ql-list" value="ordered"></button>
                                            <button class="ql-list" value="bullet"></button>
                                        </span>
                                        <span class="ql-formats">
                                            <button class="ql-link"></button>
                                            <button type="button" class="btn btn-link" @onclick="InsertImageClick">
                                                <img src="imageicon.png" style="border:hidden;width:20px;height:18px" />
                                            </button>
                                            <button type="button" class="btn btn-link" @onclick="InsertVideoClick">
                                                <img src="videoicon.png" style="border:hidden;width:20px;height:18px" />
                                            </button>
                                            <button type="button" class="btn btn-link" @onclick="ShowHTMLClick">H</button>
                                        </span>
                                    </ToolbarContent>
                                    <EditorContent>
                                        @* @((MarkupString)Model.Content)*@
                                    </EditorContent>
                                </BlazoredTextEditor>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
            
        <ImageSelector @ref="ImageManagerControl" ImageSelected="InsertImage"></ImageSelector>
        <HTMLEdit @ref="EditHTML" TextChanged="ApplyHTML"></HTMLEdit>
        <EmbedVideoInsert @ref="VideoInsertControl" InsertVideo="InsertVideo"></EmbedVideoInsert>
        <CategoryCreate @ref="CreateCategory" CloseEventCallbak="LoadCategories"></CategoryCreate>
    </section>
}

@code {
    private string BackendApiUrl { get; set; }

    [Parameter]
    public string Id { set; get; }
    public string Tag { set; get; }

    private ProductDetailDto Model { get; set; }
    private List<WarehouseCategoryDto> Categories { set; get; }
    private List<string> Tags { set; get; } 

    private HTMLEdit EditHTML { get; set; }
    private ImageSelector ImageManagerControl { get; set; }
    private EmbedVideoInsert VideoInsertControl { get; set; }
    private BlazoredTextEditor QuillHtml;
    protected CategoryCreate CreateCategory { set; get; }
    protected AttributeList ProductAttributeListControl { get; set; }
    protected SEOItem SEOItemControl { set; get; }

    private string LanguageCode = "vi";

    protected async override Task OnInitializedAsync()
    {
        BackendApiUrl = Configuration["BackendApiUrl"];

        await LoadCategories();

        if (string.IsNullOrEmpty(Id))
        {
            Model = new ProductDetailDto();
            Model.CategoryId = Categories.Select(e => e.Id).FirstOrDefault();
        }
        else
        {
            await LoadData(LanguageCode);
        }
    }

    public async Task LoadData(string languageCode)
    {
        Model = await WarehouseApiClient.GetProductById(Id);

        Tags = await WebsiteApiClient.GetTags();
        StateHasChanged();

        await ApplyHTML(Model.Content);

        //await SEOItemControl.Load();
    }

    public async Task LoadCategories()
    {
        var categories = await WarehouseApiClient.GetCategories();
        Categories = SortTable(categories, null, "", "---");
    }

    public async Task OnCategoryChanged(Guid categoryId)
    {
        Model.CategoryId = categoryId;
        var result = await WarehouseApiClient.UpdateProductCategory(Model.Id, Model.CategoryId);
        if (result)
        {
            ToastService.ShowInfo("Thay đổi danh mục thành công");
            await ProductAttributeListControl.Load();
        }
        else ToastService.ShowError("Thay đổi danh mục không thành công");
    }

    protected async Task ShowHTMLClick()
    {
        Model.Content = await this.QuillHtml.GetHTML();
        EditHTML.Show(Model.Content);
    }
    protected async Task ApplyHTML(string content)
    {
        var count = 0;
        while (count < 10)
        {
            try
            {
                if (content == null) content = string.Empty;
                await this.QuillHtml.LoadHTMLContent(content);
                StateHasChanged();
                count = 10;
            }
            catch
            {
                await Task.Delay(100);
                count ++;
            }
        }
    }

    protected async Task InsertImageClick()
    {
        ImageManagerControl.Show(true);
    }
    protected async Task InsertImage(string paramImageURL)
    {
        await this.QuillHtml.InsertImage(paramImageURL);
        
        if (!string.IsNullOrEmpty(Model.Title))
        {
            var currentImageURL = $"<img src=\"{paramImageURL}\" alt=\"{paramImageURL}\">";
            var newImageURL = $"<img src=\"{paramImageURL}\" alt=\"{Model.Title}\">";
            Model.Content = await this.QuillHtml.GetHTML();
            Model.Content = Model.Content.Replace(currentImageURL, newImageURL);
            await this.QuillHtml.LoadHTMLContent(Model.Content);
            StateHasChanged();
        }

        ImageManagerControl.Show(false);
    }

    protected async Task InsertVideoClick()
    {
        VideoInsertControl.Show(true);
    }
    protected async Task InsertVideo(string embedVideo)
    {
        // Model.Content = await this.QuillHtml.GetHTML();
        // Model.Content += embedVideo;

        await this.QuillHtml.InsertImage("DybiEmbedVideoInsert");
        
        Model.Content = await this.QuillHtml.GetHTML();
        Model.Content = Model.Content.Replace("<img src=\"DybiEmbedVideoInsert\" alt=\"DybiEmbedVideoInsert\">", embedVideo);

        await this.QuillHtml.LoadHTMLContent(Model.Content);
        StateHasChanged();
    }

    private async void LogoChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(); // get the files selected by the users
        foreach (var file in files)
        {
            //var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
            var buf = new byte[file.Size]; // allocate a buffer to fill with the file's data
            using (var stream = file.OpenReadStream(file.Size))
            {
                await stream.ReadAsync(buf); // copy the stream to the buffer
            }
            Model.Image.Base64data = Convert.ToBase64String(buf);
            Model.Image.ContentType = file.ContentType;
            Model.Image.FileName = file.Name;
        }
    }

    public async void ApplyChanged()
    {
        var result = await WebsiteApiClient.UpdatePublish(Model.Id);
        if (result)
        {
            if (Model.IsPuslished) ToastService.ShowWarning("Đã ẩn khỏi giao diện web");
            else ToastService.ShowInfo("Đã hiển thị trên giao diện web");
        }
        else ToastService.ShowError("Cập nhật không thành công");
    }

    protected async Task HandleSubmit()
    {
        Model.Content = await this.QuillHtml.GetHTML();

        var result = await WarehouseApiClient.UpdateProduct(Model);
        if (result)
        {
            ToastService.ShowInfo("Cập nhật sản phẩm thành công");
            await LoadData(Model.LanguageCode);
        }
        else
        {
        ToastService.ShowError("Cập nhật sản phẩm không thành công");
        }
    }

    private List<WarehouseCategoryDto> SortTable(List<WarehouseCategoryDto> table, Guid? parentId, string space = "", string distance = "....")
    {
        var rows = table.Where(dto => dto.ParentId == parentId).ToList();
        if (!rows.Any()) return new List<WarehouseCategoryDto>();
        var sortData = new List<WarehouseCategoryDto>();
        foreach (var row in rows)
        {
            var spaceNext = space + distance;
            var dt = SortTable(table, row.Id, spaceNext, distance);
            row.Title = space + row.Title;
            //row.Title = space + row.Title;
            sortData.Add(row);

            if (dt.Count > 0) sortData.AddRange(dt);
        }
        return sortData;
    }
}
