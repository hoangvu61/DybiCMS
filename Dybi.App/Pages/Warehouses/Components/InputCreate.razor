@using Web.Models;
@using System.IO;
@using Web.Models.Enums
@using Dybi.App.Services;
@using Dybi.App.Pages.Warehouses.Components
@using Dybi.App.Pages.Settings.Components

@inject NavigationManager NavigationManager;
@inject IToastService ToastService;
@inject IWarehouseApiClient WarehouseApiClient;
@inject IJSRuntime JS


<div class="modal fade @(ShowDialog?"show d-block":"")" id="assignModel" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Thêm phiếu Nhập kho</h5>
                <button type="button" class="close" data-dismiss="modal" @onclick="()=>Hide()" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col">
                        @foreach (var item in DataSource.WarehouseInputTypes)
                        {
                            <div class="form-check">
                                <input id="Type_@item.Key" class="form-check-input" type="radio" name="Type" checked="@(Model.Type == item.Key)" @onchange="@(() => Model.Type = item.Key)" />
                                <label for="Type_@item.Key">@item.Value</label>
                            </div>
                        }
                    </div>
                    <div class="col">
                        <div class="input-group input-group-sm mb-3">
                            <label class="input-group-text">Mã nhập kho:</label>
                            <InputText id="inputCode" class="form-control form-control-sm" tabindex="1" @bind-Value="Model.InputCode" />
                        </div>
                        <div class="input-group input-group-sm mb-3">
                            <label class="input-group-text">Nhập vào kho:</label>
                            <InputSelect tabindex="2" class="form-select form-select-sm" @bind-Value="Model.WarehouseId">
                                @if (Warehouses != null)
                                {
                                    foreach (var item in Warehouses)
                                    {
                                        <option value="@item.Id">@item.Name</option>
                                    }
                                }
                            </InputSelect>
                            <button type="button" class="btn btn-light btn-sm" @onclick="() => { WarehouseCreateDialog.Show(); Hide(); }"><span class="oi oi-plus"></span></button>
                        </div>
                        <div class="form-group">
                            @if (Model.Type == 1)
                            {
                                if (Supplyers != null && Supplyers.Count == 1) Model.FromId = Supplyers[0].Id;
                                <div class="input-group input-group-sm mb-3">
                                    <span class="input-group-text">Nhà cung cấp</span>
                                    <InputSelect tabindex="3" class="form-select form-select-sm" @bind-Value="Model.FromId">
                                        @if (Supplyers != null && Supplyers.Count > 0)
                                        {
                                            foreach (var item in Supplyers)
                                            {
                                                <option value="@item.Id">@item.Name</option>
                                            }
                                        }
                                    </InputSelect>
                                    <button type="button" class="btn btn-light btn-sm" @onclick="() => { SupplierCreateDialog.Show(); Hide(); }"><span class="oi oi-plus"></span></button>
                                </div>
                                <div class="input-group input-group-sm mb-3">
                                    <span class="input-group-text">Tổng tiền</span>
                                    <input tabindex="4" class="form-control form-control-sm" type="number" @bind="Model.TotalPrice" @bind:event="oninput" @onkeyup="StateHasChanged" @onchange="StateHasChanged" />
                                    @if (Model.TotalPrice > 0)
                                    {
                                        <button type="button" class="btn btn-light btn-sm" @onclick="()=>{ DebtDialog.Show(Model.TotalPrice); Hide(); }"><span class="oi oi-plus"></span> Trả trước</button>
                                    }
                                </div>
                                @if (Model.Payment > 0)
                                {
                                    <div class="input-group input-group-sm mb-3">
                                        <span class="input-group-text">Trả trước: @($"{(Model.Payment):N0}") <sup>đ</sup></span>
                                        <span class="input-group-text">Nợ: @($"{(Model.TotalPrice - Model.Payment):N0}") <sup>đ</sup></span>
                                    </div>
                                }
                            }
                            else if (Model.Type == 2)
                            {
                                if (Factories != null && Factories.Count == 1) Model.FromId = Factories[0].Id;
                                <div class="input-group input-group-sm mb-3">
                                    <span class="input-group-text">Nơi sản xuất</span>
                                    <InputSelect tabindex="3" class="form-select form-select-sm" @bind-Value="Model.FromId">
                                        @if (Factories != null && Factories.Count > 0)
                                        {
                                            foreach (var item in Factories)
                                            {
                                                <option value="@item.Id">@item.Name</option>
                                            }
                                        }
                                    </InputSelect>
                                    <button type="button" class="btn btn-light btn-sm" @onclick="() => { FactoryCreateDialog.Show(); Hide(); }"><span class="oi oi-plus"></span></button>
                                </div>
                            }
                            else if (Model.Type == 3)
                            {
                                if (Warehouses != null && Warehouses.Count == 1) Model.FromId = Warehouses[0].Id;
                                <div class="input-group input-group-sm mb-3">
                                    <span class="input-group-text">Từ kho</span>
                                    <InputSelect tabindex="3" class="form-select form-select-sm" @bind-Value="Model.FromId">
                                        @if (Warehouses != null && Warehouses.Count > 0)
                                        {
                                            foreach (var item in Warehouses)
                                            {
                                                <option value="@item.Id">@item.Name</option>
                                            }
                                        }
                                    </InputSelect>
                                    <button type="button" class="btn btn-light btn-sm" @onclick="() => { WarehouseCreateDialog.Show(); Hide(); }"><span class="oi oi-plus"></span></button>
                                </div>
                            }
                            else if (Model.Type == 4)
                            {
                                Model.FromId = null;
                                <div class="input-group input-group-sm mb-3">
                                    <span class="input-group-text">Mã đơn hàng trả lại</span>
                                    <input id="inputOrderId" tabindex="1" class="form-control form-control-sm" @bind="Model.FromId" @bind:event="oninput" />
                                </div>
                            }
                        </div>
                    </div>
                    <div class="col-12">
                        <div class="input-group input-group-sm mb-3">
                            <label class="input-group-text">Ghi chú:</label>
                            <InputTextArea id="inputCode" class="form-control form-control-sm" tabindex="1" @bind-Value="Model.Note" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary btn-sm" @onclick="()=>Hide()" data-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-primary btn-sm" @onclick="()=>CreateInput()">Thêm</button>
            </div>
        </div>
    </div>
</div>


<InputPayment @ref="DebtDialog" OnPayment="PaymentChange"></InputPayment>
<WarehouseCreate @ref="WarehouseCreateDialog" CloseEventCallbak="LoadWarehouses"></WarehouseCreate>
<SupplierCreate @ref="SupplierCreateDialog" CloseEventCallbak="LoadSupplyers"></SupplierCreate>
<FactoryCreate @ref="FactoryCreateDialog" CloseEventCallbak="LoadFactories"></FactoryCreate>

@code {
    protected bool ShowDialog { get; set; }

    protected InputPayment DebtDialog { set; get; }
    protected WarehouseCreate WarehouseCreateDialog { set; get; }
    protected SupplierCreate SupplierCreateDialog { set; get; }
    protected FactoryCreate FactoryCreateDialog { set; get; }

    private WarehouseInputRequest Model { set; get; } = new WarehouseInputRequest();

    private List<WarehouseSupplierDto> Supplyers { set; get; }
    private List<WarehouseFactoryDto> Factories { set; get; }
    private List<WarehouseDto> Warehouses { set; get; }

    protected async override Task OnInitializedAsync()
    {
        Supplyers = await WarehouseApiClient.GetSuppliers();
        Supplyers = Supplyers.Where(e => e.IsActive).ToList();

        Factories = await WarehouseApiClient.GetFactories();
        Factories = Factories.Where(e => e.IsActive).ToList();

        Warehouses = await WarehouseApiClient.GetWarehouses();
        Warehouses = Warehouses.Where(e => e.IsActive).ToList();
        if (Warehouses.Count > 0) Model.WarehouseId = Warehouses.First().Id;
    }

    public async Task Show()
    {
        ShowDialog = true;
        Model.Id = Guid.NewGuid();
        Model.Type = 1;
        if (Supplyers != null && Supplyers.Count == 1) Model.FromId = Supplyers[0].Id;
        StateHasChanged();
        await JS.InvokeVoidAsync("setFocus", "#inputCode");
    }

    private void Hide()
    {
        ShowDialog = false;
        StateHasChanged();
    }

    private async Task LoadSupplyers(bool isLoad)
    {
        if (isLoad)
        {
            Supplyers = await WarehouseApiClient.GetSuppliers();
            Supplyers = Supplyers.Where(e => e.IsActive).ToList();
        }
        
        ShowDialog = true;
        StateHasChanged();
    }
    private async Task LoadFactories(bool isLoad)
    {
        if (isLoad)
        {
            Factories = await WarehouseApiClient.GetFactories();
            Factories = Factories.Where(e => e.IsActive).ToList();
        }

        ShowDialog = true;
        StateHasChanged();
    }
    private async Task LoadWarehouses(bool isLoad)
    {
        if (isLoad)
        {
            Warehouses = await WarehouseApiClient.GetWarehouses();
            Warehouses = Warehouses.Where(e => e.IsActive).ToList();
        }

        ShowDialog = true;
        StateHasChanged();
    }

    private void PaymentChange(decimal payment)
    {
        if (Model.Payment != payment) Model.Payment = payment;
        ShowDialog = true;
        StateHasChanged();
    }

    protected async Task CreateInput()
    {
        var result = await WarehouseApiClient.CreateWarehouseInput(Model);
        if (string.IsNullOrEmpty(result))
        {
            ShowDialog = false;
            ToastService.ShowInfo("Thêm phiếu nhập kho thành công");
            NavigationManager.NavigateTo($"warehouses/inputs/{Model.Id}");
        }
        else ToastService.ShowError(result);
    }
}