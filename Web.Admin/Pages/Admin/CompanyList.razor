@page "/companylist"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization;
@using Web.Admin.Components;
@using Web.Admin.Pages.Admin.Components;
@using Web.Admin.Services;
@using Web.Models;
@using Web.Models.SeedWork;
@inject IConfiguration Configuration

<section class="content-header">
    <div class="container-fluid">
        <h1 class="m-0">Quản lý Website</h1>
    </div>
</section>
<section class="content">
    <div class="container-fluid">
        @if (Companies == null)
        {
            <LoadingIndicator></LoadingIndicator>
        }
        else
        {
            <div class="row">
                <div class="col-md-12">
                    <div class="card card-outline card-info">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Mã</th>
                                    <th>Tên miền</th>
                                    <th>Ngôn ngữ</th>
                                    <th>Tài khoản</th>
                                    <th>Giao diện</th>
                                    <th>Tên</th>
                                    <th>Điện thoại</th>
                                    <th>Ngày tạo</th>
                                    <th><a href="/Signup" class="btn btn-primary btn-xs">Thêm</a></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Companies)
                                {
                                    <tr>
                                        <td>@item.Id</td>
                                        <td>@item.Domain <span class="badge badge-info" @onclick="() => OpenDomainPopup(item.Id)" style="cursor:pointer">@item.DomainCount</span></td>
                                        <td>@item.Language <span class="badge badge-info" @onclick="() => OpenLanguagePopup(item.Id)" style="cursor:pointer">@item.LanguageCount</span></td>
                                        <td>@item.User <span class="badge badge-info" @onclick="() => OpenUserPopup(item.Id)" style="cursor:pointer">@item.UserCount</span></td>
                                        <td>@item.TemplateName</td>
                                        <td>@item.FullName</td>
                                        <td>@item.Phone</td>
                                        <td>@item.CreateDate.ToString(Configuration["DateTimeFormat"])</td>
                                        <td style="text-align:right">
                                            <button class="btn btn-danger btn-xs" @onclick="()=> OnDeleteCompany(item.Id)">xóa</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="9">
                                        <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage"></Pagination>
                                    </td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
            <Confirmation ConfirmationMessage="Bạn có chắc chắn xóa?"
                      ConfirmationTitle="Xóa Website"
                      @ref="DeleteConfirmation"
                      ConfirmationChanged="OnConfirmDeleteCompany">
            </Confirmation>
            
            <CompanyUserList @ref="ListCompanyUser" CloseEventCallbak="GetCompanies"></CompanyUserList>
            <CompanyLanguageList @ref="ListLanguages" CloseEventCallbak="GetCompanies"></CompanyLanguageList>
            <CompanyDomainList @ref="ListCompanyDomain" CloseEventCallbak="GetCompanies"></CompanyDomainList>
        }
    </div>
</section>

@code {
    [Inject] private ICompanyApiClient CompanyApiClient { get; set; }

    protected Confirmation DeleteConfirmation { set; get; }
    
    private List<CompanyDto> Companies;
    private Guid DeleteId { set; get; }
    public MetaData MetaData { get; set; } = new MetaData();
    private PagingParameters Paging = new PagingParameters(10);

    [CascadingParameter]
    private Error Error { set; get; }

    protected CompanyLanguageList ListLanguages { get; set; }
    protected CompanyDomainList ListCompanyDomain { get; set; }
    protected CompanyUserList ListCompanyUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetCompanies();
    }

    private async Task GetCompanies()
    {
        try
        {
            var pagingResponse = await CompanyApiClient.GetCompanyList(Paging);
            Companies = pagingResponse.Items;
            MetaData = pagingResponse.MetaData;
        }
        catch (Exception ex)
        {
            Error.ProcessError(ex);
        }

    }

    public void OnDeleteCompany(Guid deleteId)
    {
        DeleteId = deleteId;
        DeleteConfirmation.Show();
    }

    public async Task OnConfirmDeleteCompany(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await CompanyApiClient.DeleteCompany(DeleteId);
            await GetCompanies();
        }
    }

    private async Task SelectedPage(int page)
    {
        Paging.PageNumber = page;
        await GetCompanies();
    }

    public void OpenDomainPopup(Guid id)
    {
        ListCompanyDomain.Show(id);
    }
    public void OpenLanguagePopup(Guid id)
    {
        ListLanguages.Show(id);
    }
    public void OpenUserPopup(Guid id)
    {
        ListCompanyUser.Show(id);
    }
}