@using Web.Admin.Services;
@using Web.Models;

@inject IToastService ToastService;
@inject IUserApiClient UserApiClient;

@if (ShowDialog && FullRoles != null)
{
    <div class="modal fade show d-block" id="assignModel" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-scrollable" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Cấp quyền</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="()=>Hide()" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <div class="input-group input-group-sm mb-3" style="font-weight:bold">
                            <span class="input-group-text">Tài khoản</span>
                            <InputText class="form-control form-control-sm" @bind-Value="UserName" readonly="readonly"></InputText>
                        </div>
                    </div>
                    @foreach (var role in FullRoles)
                    {
                        <div class="row form-switch" style="padding:0">
                            <div class="col"><label class="form-check-label">@role.Description</label></div>
                            <div class="col" style="text-align:right;padding:0">
                                <input type="checkbox" checked="@(UserRoles.Contains(role.Name))" class="form-check-input" role="switch" @onchange="@((e) => Onchange(role.Name, Boolean.Parse(e.Value.ToString()), role.Description))"></input>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    protected bool ShowDialog { get; set; }

    private List<RoleDto> FullRoles { set; get; }
    private List<string> UserRoles { set; get; }
    private Guid CompanyId { set; get; }
    private Guid UserId { set; get; }
    private string UserName { set; get; }

    [Parameter]
    public EventCallback<bool> CloseEventCallback { get; set; }

    public async Task Show(Guid companyId, Guid userId, string userName)
    {
        ShowDialog = true;
        CompanyId = companyId;
        UserId = userId;
        UserName = userName;
        FullRoles = await UserApiClient.GetRoles();
        UserRoles = await UserApiClient.GetUserRoles(companyId, userId);

        StateHasChanged();
    }

    private void Hide()
    {
        ShowDialog = false;
        StateHasChanged();
    }

    private async Task Onchange(string name, bool check, string description)
    {
        var request = new UserRoleDto { RoleName = name, IsAllow = check };
        var result = await UserApiClient.UpdateUserRole(CompanyId, UserId, request);
        if (string.IsNullOrEmpty(result))
        {
            await CloseEventCallback.InvokeAsync(false);
            var flag = check ? "bật" : "tắt";
            ToastService.ShowInfo($"Đã {flag} chức năng {description}");
        }
        else ToastService.ShowError(result);
    }
}