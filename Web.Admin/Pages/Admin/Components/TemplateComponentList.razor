@using Web.Admin.Services;
@using Web.Models;
@using Web.Admin.Components;
@using Web.Models.SeedWork;

@inject IToastService ToastService;
@inject ITemplateApiClient TemplateApiClient;

@if (!string.IsNullOrEmpty(TemplateName))
{
    <div class="card card-outline card-info">
        <div class="card-header">
            <h3 class="card-title">Danh sách Component của Template <strong>@TemplateName</strong></h3>
        </div>
        <div class="card-body">
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th>Component</th>
                        <th>Mô tả</th>
                        <th style="text-align:right">
                            <button class="btn btn-primary btn-xs" @onclick="()=> OpenCreatePopup()">Thêm</button>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @if (Components != null)
                    {
                        <TemplateComponentCreate @ref="CreateTemplateComponent" CloseEventCallbak="RefreshList"></TemplateComponentCreate>
                        @foreach (var item in Components)
                        {
                            <tr>
                                <td>@item.ComponentName</td>
                                <td>@item.Describe</td>
                                <td style="text-align:right">
                                    <button class="btn btn-success btn-xs" @onclick="()=> OpenUpdatePopup(item.ComponentName)">Sửa</button>
                                    <button class="btn btn-danger btn-xs" @onclick="()=> OnDelete(item.ComponentName)">Xóa</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="3">
                            <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage"></Pagination>
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>
    <Confirmation ConfirmationMessage="Bạn có chắc chắn xóa?"
              ConfirmationTitle="Xóa Component"
              @ref="DeleteConfirmation"
              ConfirmationChanged="OnConfirmDelete">
    </Confirmation>

    <TemplateComponentUpdate @ref="UpdateTemplateComponent" CloseEventCallbak="RefreshList"></TemplateComponentUpdate>
}

@code {
    private string TemplateName { set; get; }
    private List<TemplateComponentDto> Components;
    private string DeleteComponentName { set; get; }

    protected Confirmation DeleteConfirmation { set; get; }
    protected TemplateComponentCreate CreateTemplateComponent { set; get; }
    protected TemplateComponentUpdate UpdateTemplateComponent { set; get; }

    public MetaData MetaData { get; set; } = new MetaData();
    private PagingParameters Paging = new PagingParameters(5);

    [CascadingParameter]
    private Error Error { set; get; }

    public async Task RefreshList()
    {
        try
        {
            var pagingResponse = await TemplateApiClient.GetTemplateComponentList(TemplateName, Paging);
            Components = pagingResponse.Items;
            MetaData = pagingResponse.MetaData;
        }
        catch (Exception ex)
        {
            Error.ProcessError(ex);
        }
    }

    private async Task SelectedPage(int page)
    {
        Paging.PageNumber = page;
        await RefreshList();
    }

    public async void Show(string name)
    {
        TemplateName = name;

        await RefreshList();

        StateHasChanged();
    }

    public void OpenCreatePopup()
    {
        CreateTemplateComponent.Show(TemplateName);
    }
    public void OpenUpdatePopup(string paramName)
    {
        UpdateTemplateComponent.Show(TemplateName, paramName);
    }

    public void OnDelete(string name)
    {
        DeleteComponentName = name;
        DeleteConfirmation.Show();
    }

    public async Task OnConfirmDelete(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await TemplateApiClient.DeleteTemplateComponent(TemplateName, DeleteComponentName);
            await RefreshList();
        }
    }
}