@page "/companyinfo"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization;
@using Web.Admin.Components;
@using Web.Admin.Components.TextEditor;
@using Web.Admin.Pages.Config.Components
@using Web.Admin.Services;
@using Web.Models;
@using Web.Models.Enums;
@using Microsoft.Extensions.Configuration
@using Blazored.TextEditor

@inject IToastService ToastService;
@inject ICompanyApiClient CompanyApiClient;

<section class="content-header">
    <div class="container-fluid">
        <h1 class="m-0">Thông tin website</h1>
    </div>
</section>

<section class="content">
    <div class="container-fluid">
        @if (Model == null)
        {
            <LoadingIndicator></LoadingIndicator>
        }
        else
        {
            <LanguageOption CurrentLanguage="@Model.LanguageCode" SelectLanguage="LoadData"></LanguageOption>
            <WebInfo @ref="WebSEOInfo" LanguageCode="@Model.LanguageCode"></WebInfo>
            <div class="row">
                <div class="col-md-8">
                    <div class="card card-outline card-info">
                        <div class="card-header">
                            <h3 class="card-title">
                                <i class="fas fa-edit"></i>
                                Thông tin chính
                            </h3>
                        </div>
                        <EditForm Model="ModelRequest" OnValidSubmit="HandleSubmit">
                            <DataAnnotationsValidator></DataAnnotationsValidator>
                        <div class="card-body">
                            <div class="form-group input-group input-group-sm">
                                <div class="input-group-prepend"> 
                                    <span class="input-group-text">Loại hình:</span>
                                </div>
                                    <InputSelect class="form-select" @bind-Value="@ModelRequest.Type">
                                    @foreach (var type in DataSource.CompanyTypes)
                                    {
                                        <option value="@type.Id">@type.Name (@type.ParentId.@type.Id)</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="()=>ModelRequest.Type"></ValidationMessage>
                            </div>
                                <div class="form-group">
                                    <div class="input-group input-group-sm">
                                        <label class="input-group-text">Mã số doanh nghiệp</label>
                                        <InputText @bind-Value="ModelRequest.TaxCode" class="form-control"></InputText>
                                        <label class="input-group-text">Cấp bởi</label>
                                        <InputText @bind-Value="ModelRequest.TaxCodePlace" class="form-control"></InputText>
                                        <label class="input-group-text">Ngày cấp</label>
                                        <InputDate @bind-Value="ModelRequest.PublishDate" class="form-control"></InputDate>
                                    </div>
                                    <ValidationMessage For="()=> ModelRequest.TaxCode"></ValidationMessage>
                                    <ValidationMessage For="()=> ModelRequest.TaxCodePlace"></ValidationMessage>
                                    <ValidationMessage For="()=> ModelRequest.PublishDate"></ValidationMessage>
                                </div>
                                <div class="form-group">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">Tên đầy đủ</span>
                                        <InputText @bind-Value="ModelRequest.FullName" class="form-control"></InputText>
                                    </div>
                                    <ValidationMessage For="()=> ModelRequest.FullName"></ValidationMessage>
                                </div>
                                <div class="form-group">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">Biệt danh</span>
                                        <InputText @bind-Value="ModelRequest.NickName" class="form-control"></InputText>
                                    </div>
                                    <ValidationMessage For="()=> ModelRequest.NickName"></ValidationMessage>
                                </div>
                                <div class="form-group">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">Tên hiển thị</span>
                                        <InputText @bind-Value="ModelRequest.DisplayName" class="form-control"></InputText>
                                    </div>
                                    <ValidationMessage For="()=> ModelRequest.DisplayName"></ValidationMessage>
                                </div>
                                <div class="form-group">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">Ngành nghề</span>
                                        <InputText @bind-Value="ModelRequest.JobTitle" class="form-control"></InputText>
                                    </div>
                                    <ValidationMessage For="()=> ModelRequest.JobTitle"></ValidationMessage>
                                </div>
                                <div class="form-group">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">Slogan</span>
                                        <InputText @bind-Value="ModelRequest.Slogan" class="form-control"></InputText>
                                    </div>
                                    <ValidationMessage For="()=> ModelRequest.Slogan"></ValidationMessage>
                                </div>
                                <div class="form-group">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">Tầm nhìn</span>
                                        <InputTextArea @bind-Value="ModelRequest.Vision" class="form-control"></InputTextArea>
                                    </div>
                                    <ValidationMessage For="()=> ModelRequest.Vision"></ValidationMessage>
                                </div>
                                <div class="form-group">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">Sứ mệnh</span>
                                        <InputTextArea @bind-Value="ModelRequest.Mission" class="form-control"></InputTextArea>
                                    </div>
                                    <ValidationMessage For="()=> ModelRequest.Mission"></ValidationMessage>
                                </div>
                                <div class="form-group">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">Giá trị cốt lõi</span>
                                        <InputTextArea @bind-Value="ModelRequest.CoreValues" class="form-control"></InputTextArea>
                                    </div>
                                    <ValidationMessage For="()=> ModelRequest.CoreValues"></ValidationMessage>
                                </div>
                                <div class="form-group">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">Phương châm</span>
                                        <InputTextArea @bind-Value="ModelRequest.Motto" class="form-control"></InputTextArea>
                                    </div>
                                    <ValidationMessage For="()=> ModelRequest.Motto"></ValidationMessage>
                                </div>
                                <div class="form-group">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">Mô tả ngắn</span>
                                        <InputTextArea @bind-Value="ModelRequest.Brief" class="form-control"></InputTextArea>
                                    </div>
                                    <ValidationMessage For="()=> ModelRequest.Brief"></ValidationMessage>
                                </div>
                                <div class="form-group">
                                    <label>Mô tả chi tiết:</label> 
                                    <BlazoredTextEditor @ref="@QuillHtml">
                                        <ToolbarContent>
                                            <select class="ql-header">
                                                <option selected=""></option>
                                                <option value="2"></option>
                                                <option value="3"></option>
                                                <option value="4"></option>
                                                <option value="5"></option>
                                            </select>
                                            <span class="ql-formats">
                                                <select class="ql-size">
                                                    <option value="small"></option>
                                                    <option selected=""></option>
                                                    <option value="large"></option>
                                                    <option value="huge"></option>
                                                </select>
                                            </span>
                                            <span class="ql-formats">
                                                <button class="ql-bold"></button>
                                                <button class="ql-italic"></button>
                                                <button class="ql-underline"></button>
                                                <button class="ql-strike"></button>
                                            </span>
                                            <span class="ql-formats">
                                                <select class="ql-color"></select>
                                                <select class="ql-background"></select>
                                            </span>
                                            <span class="ql-formats">
                                                <button class="ql-list" value="ordered"></button>
                                                <button class="ql-list" value="bullet"></button>
                                                <button class="ql-indent" value="-1"></button>
                                                <button class="ql-indent" value="+1"></button>
                                                <select class="ql-align">
                                                    <option selected=""></option>
                                                    <option value="center"></option>
                                                    <option value="right"></option>
                                                    <option value="justify"></option>
                                                </select>
                                            </span>
                                            <span class="ql-formats">
                                                <button class="ql-link"></button>
                                            </span>

                                            <span class="ql-formats">
                                                <button type="button" class="btn btn-img" @onclick="InsertImageClick">
                                                    <img src="imageicon.png" style="border:hidden;width:20px;height:18px" />
                                                </button>
                                                <button type="button" class="btn btn-img" @onclick="InsertVideoClick">
                                                    <img src="videoicon.png" style="border:hidden;width:20px;height:18px" />
                                                </button>
                                            </span>
                                            <span class="ql-formats">
                                                <button type="button" class="btn btn-code" @onclick="ShowHTMLClick">&lt;/&gt;</button>
                                            </span>
                                        </ToolbarContent>
                                        <EditorContent>
                                            @((MarkupString)Model.AboutUs)
                                        </EditorContent>
                                    </BlazoredTextEditor>
                                </div>
                        
                        </div>
                        <div class="card-footer" style="text-align:right">
                            <button type="submit" class="btn btn-info btn-xs">Lưu</button>
                        </div>
                        </EditForm>
                    </div>
                    <CompanyLanguageConfig @ref="LanguageConfig" LanguageCode="@Model.LanguageCode"></CompanyLanguageConfig>
                </div>
                <div class="col-md-4">
                    @if (!string.IsNullOrEmpty(Model.LanguageCode))
                    {
                        <BranchesList @ref="ListBranches" LanguageCode="@Model.LanguageCode"></BranchesList>
                    }
                    @if (Model.Id != Guid.Empty)
                    {
                        <WebConfigImage CompanyId="@Model.Id" WebIconName="@Model.WebIcon" LogoName="@Model.Logo" ImageName="@Model.Image"></WebConfigImage>
                        <WebBackground CompanyId="@Model.Id" Header="@Model.Header" FontColor="@Model.FontColor" FontSize="@Model.FontSize" Background="@Model.Background"></WebBackground>
                        <Webconfig CanRightClick="@Model.CanRightClick" CanSelectCopy="@Model.CanSelectCopy" Hierarchy="@Model.Hierarchy"></Webconfig>
                    }
                
                </div>
            </div>
            <ImageSelector @ref="ImageManagerControl" ImageSelected="InsertImage" ImageAddAlt="AddAlt"></ImageSelector>
            <EmbedVideoInsert @ref="VideoInsertControl" InsertVideo="InsertVideo"></EmbedVideoInsert>
            <HTMLEdit @ref="EditHTML" TextChanged="ApplyHTML"></HTMLEdit>
        }
    </div>
</section>


@code {
    private WebInfo WebSEOInfo { get; set; }
    private BranchesList ListBranches { get; set; }
    private CompanyLanguageConfig LanguageConfig { get; set; }
    private WebInfoDto Model { get; set; }
    private WebInfoRequest ModelRequest { get; set; }

    private HTMLEdit EditHTML { get; set; }
    private ImageSelector ImageManagerControl { get; set; }
    private EmbedVideoInsert VideoInsertControl { get; set; }
    private BlazoredTextEditor QuillHtml;

    private string LanguageCode { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var languages = await CompanyApiClient.GetLanguageList(Guid.Empty);
        if (languages.Count == 0 || languages.Contains("vi")) LanguageCode = "vi";
        else LanguageCode = languages.First();

        Model = await CompanyApiClient.GetCompanyInfo(LanguageCode);
        Model.LanguageCode = LanguageCode;
        ModelRequest = new WebInfoRequest
            {
                AboutUs = Model.AboutUs,
                Brief = Model.Brief,
                DisplayName = Model.DisplayName,
                FullName = Model.FullName,
                LanguageCode = Model.LanguageCode,
                Slogan = Model.Slogan,
                TaxCode = Model.TaxCode,
                TaxCodePlace = Model.TaxCodePlace,
                PublishDate = Model.PublishDate,
                NickName = Model.NickName,
                Vision = Model.Vision,
                Mission = Model.Mission,
                CoreValues = Model.CoreValues,
                Motto = Model.Motto,
                JobTitle = Model.JobTitle,
                Type = Model.Type
            };
    }

    protected async void LoadData(string languageCode)
    {
        LanguageConfig.LanguageCode = ListBranches.LanguageCode = Model.LanguageCode = languageCode;

        Model = await CompanyApiClient.GetCompanyInfo(Model.LanguageCode);
        ModelRequest = new WebInfoRequest
            {
                AboutUs = Model.AboutUs,
                Brief = Model.Brief,
                DisplayName = Model.DisplayName,
                FullName = Model.FullName,
                LanguageCode = Model.LanguageCode,
                Slogan = Model.Slogan,
                TaxCode = Model.TaxCode,
                TaxCodePlace = Model.TaxCodePlace,
                PublishDate = Model.PublishDate,
                NickName = Model.NickName,
                Vision = Model.Vision,
                Mission = Model.Mission,
                CoreValues = Model.CoreValues,
                Motto = Model.Motto,
                JobTitle = Model.JobTitle,
                Type = Model.Type
            };

        await this.QuillHtml.LoadHTMLContent(ModelRequest.AboutUs);

        await ListBranches.Load();
        await LanguageConfig.Load();
        await WebSEOInfo.Load();

        StateHasChanged();
    }

    protected async Task ShowHTMLClick()
    {
        ModelRequest.AboutUs = await this.QuillHtml.GetHTML();
        EditHTML.Show(ModelRequest.AboutUs);
    }
    protected async Task ApplyHTML(string content)
    {
        await this.QuillHtml.LoadHTMLContent(content);
        StateHasChanged();
    }

    protected void InsertImageClick()
    {
        ImageManagerControl.Show(true);
    }

    protected async Task InsertImage(string imgsrc)
    {
        await this.QuillHtml.InsertImage(imgsrc);

        StateHasChanged();
    }
    protected async Task AddAlt(ImageSelected img)
    {
        //await this.QuillHtml.InsertImage(img.URL);
        var currentImageURL = $"<img src=\"{img.URL}\" alt=\"{img.URL}\">";
        var newImageURL = string.Empty;
        if (!string.IsNullOrEmpty(img.ALT)) newImageURL = $"<img src=\"{img.URL}\" alt=\"{img.ALT}\">";
        else newImageURL = $"<img src=\"{img.URL}\" alt=\"{Model.FullName}\">";

        if (!string.IsNullOrEmpty(newImageURL))
        {
            Model.AboutUs = await this.QuillHtml.GetHTML();
            Model.AboutUs = Model.AboutUs.Replace(currentImageURL, newImageURL);
            await this.QuillHtml.LoadHTMLContent(Model.AboutUs);
        }

        StateHasChanged();
        ImageManagerControl.Show(false);
    }

    protected void InsertVideoClick()
    {
        VideoInsertControl.Show(true);
    }
    protected async Task InsertVideo(string embedVideo)
    {
        // Model.Content = await this.QuillHtml.GetHTML();
        // Model.Content += embedVideo;

        await this.QuillHtml.InsertImage("DybiEmbedVideoInsert");

        Model.AboutUs = await this.QuillHtml.GetHTML();
        Model.AboutUs = Model.AboutUs.Replace("<img src=\"DybiEmbedVideoInsert\" alt=\"DybiEmbedVideoInsert\">", embedVideo);

        await this.QuillHtml.LoadHTMLContent(Model.AboutUs);
        StateHasChanged();
    }


    protected async Task HandleSubmit()
    {
        ModelRequest.AboutUs = await this.QuillHtml.GetHTML();
        
        var result = await CompanyApiClient.UpdateCompanyInfo(ModelRequest);
        if (result)
        {
            ToastService.ShowInfo("Cập nhật thông tin thành công");
            StateHasChanged();
        }
        else
        {
            ToastService.ShowError("Cập nhật thông tin không thành công");
        }
    }
}
