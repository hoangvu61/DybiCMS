@using System.ComponentModel;
@using Web.Admin.Components;
@using Web.Admin.Services;
@using Web.Models;
@using System.IO;
@using Web.Models.Enums;
@using Web.Models.SeedWork;

@inject IToastService ToastService;
@inject IMenuApiClient MenuApiClient;
@inject IContentApiClient ContentApiClient;
@inject NavigationManager NavigationManager;

@if (ShowDialog)
{
    <div class="modal fade show d-block" id="assignModel" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <EditForm Model="Model" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Thêm menu</h5>
                        <button type="button" class="close" data-dismiss="modal" @onclick="()=>Hide()" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="Name">Loại:</label>
                            <InputSelect class="form-control form-control-sm" ValueExpression="@(()=>Model.Type)"
                                     Value="@Model.Type"
                                     ValueChanged="@((string value) => OnTypeChanged(value))">
                                 @foreach (var type in DataSource.MenuTypes)
                                 {
                                    <option value="@type.Key">@type.Key - @type.Value</option>
                                 }
                            </InputSelect>
                            <ValidationMessage For="()=>Model.Type"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            @if (Model.Type != "Article" && Model.Type != "Link")
                            {
                                <div class="input-group input-group-sm mb-3">
                                    <span class="input-group-text">Danh mục</span>
                                    <InputSelect class="form-control form-control-sm" ValueExpression="@(()=>Model.Id)"
                                                 Value="@Model.Id"
                                                 ValueChanged="@((Guid value) => OnCategoryChanged(value))">
                                        <option value="">Chọn danh mục</option>
                                        @if (Source.ContainsKey(Model.Type))
                                        {
                                            @foreach (var item in Source[Model.Type])
                                            {
                                                <option value="@item.Key">@item.Value</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                            }
                            else if (Model.Type == "Article")
                            {
                                <div class="input-group input-group-sm mb-3">
                                    <span class="input-group-text" id="inputGroup-sizing-sm">Bài viết</span>
                                    <input class="form-control" value="@Model.Id" @onchange="@(e => Model.Id = Guid.Parse(e.Value.ToString()))"></input>
                                    <button class="btn btn-secondary" type="button" @onclick="() => ListArticleControl.Show()">Chọn</button>
                                </div>
                                <ArticleListPopup @ref="ListArticleControl" EventCallbak="SelectArticle"></ArticleListPopup>
                            }
                            else if (Model.Type == "Link")
                            {
                                <div class="input-group input-group-sm mb-3">
                                    <span class="input-group-text" id="inputGroup-sizing-sm">Liên kết</span>
                                    <input class="form-control" value="@Model.Id" @onchange="@(e => Model.Id = Guid.Parse(e.Value.ToString()))"></input>
                                    <button class="btn btn-secondary" type="button" @onclick="() => ListLinkControl.Show()">Chọn</button>
                                </div>
                                <LinkListPopup @ref="ListLinkControl" EventCallbak="SelectLink"></LinkListPopup>
                            }
                        </div>
                        <div class="form-group">
                            <label class="col-form-label">Trang:</label>
                            <InputText class="form-control form-control-sm" @bind-Value="Model.Component"></InputText>
                            <ValidationMessage For="()=> Model.Component"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label class="col-form-label">Thứ tự hiển thị:</label>
                            <InputNumber class="form-control form-control-sm" @bind-Value="Model.Order"></InputNumber>
                            <ValidationMessage For="()=> Model.Order"></ValidationMessage>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary btn-xs" @onclick="()=>Hide()" data-dismiss="modal">Đóng</button>
                        <button type="submit" class="btn btn-primary btn-xs">Thêm</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>

   
}

@code {
    protected bool ShowDialog { get; set; }

    private MenuCreateRequest Model { set; get; } = new MenuCreateRequest();
    private Dictionary<string, Dictionary<Guid, string>> Source { get; set; } = new Dictionary<string, Dictionary<Guid, string>>();

    private ArticleListPopup ListArticleControl { get; set; }
    private LinkListPopup ListLinkControl { get; set; }

    [Parameter]
    public EventCallback CloseEventCallbak { get; set; }

    [Parameter]
    public string LanguageCode { set; get; }

    public void Show()
    {
        ShowDialog = true;
        Model.Type = DataSource.MenuTypes.First().Value;
        StateHasChanged();
    }

    private void Hide()
    {
        ShowDialog = false;
        StateHasChanged();
    }

    protected async Task OnTypeChanged(string type)
    {
        Model.Type = type;
        if (!Source.ContainsKey(type))
        {
            Source[type] = new Dictionary<Guid, string>();
            switch (type)
            {
                case "Categories":
                case "Category":
                    var Category = await ContentApiClient.GetCategories();
                    Category = SortTable(Category, null, "", "---");
                    foreach (var cat in Category)
                    {
                        Source[type][cat.Id] = cat.Type + cat.Titles.Where(e => e.Key == LanguageCode).Select(e => e.Value).FirstOrDefault();
                    }
                    break;
                case "Articles":
                    Model.Component = "Articles";
                    var CategoryArticle = await ContentApiClient.GetCategories("ART");
                    CategoryArticle = SortTable(CategoryArticle, null, "", "---");
                    foreach (var cat in CategoryArticle)
                    {
                        Source[type][cat.Id] = cat.Type + cat.Titles.Where(e => e.Key == LanguageCode).Select(e => e.Value).FirstOrDefault();
                    }
                    break;
                case "Links":
                    Model.Component = "Medias";
                    var CategoryMedia = await ContentApiClient.GetCategories("MID");
                    CategoryMedia = SortTable(CategoryMedia, null, "", "---");
                    foreach (var cat in CategoryMedia)
                    {
                        Source[type][cat.Id] = cat.Type + cat.Titles.Where(e => e.Key == LanguageCode).Select(e => e.Value).FirstOrDefault();
                    }
                    break;
                case "Article":
                    Model.Component = "Article";
                    break;
            }
        }
    }

    protected async Task OnCategoryChanged(Guid id)
    {
        var category = await ContentApiClient.GetCategory(id, LanguageCode);
        if (category != null)
        {
            Model.Id = id;
            switch(category.Type)
            {
                case "ART": Model.Component = "Articles"; break;
                case "PRO": Model.Component = "Products"; break;
                case "MID": Model.Component = "Medias"; break;
            }
        }
    }

    protected async Task SelectArticle(ArticleDto article)
    {
        Model.Id = article.Id;
    }
    protected async Task SelectLink(MediaDto media)
    {
        Model.Id = media.Id;
    }

    protected async Task HandleSubmit()
    {        
        var result = await MenuApiClient.Create(Model);
        if (result)
        {
            ShowDialog = false;
            await CloseEventCallbak.InvokeAsync();
            ToastService.ShowInfo("Thêm menu thành công");
            Hide();
        }
        else
        {
            ToastService.ShowError("Thêm cấu hình không thành công");
        }
    }

    private List<CategoryDto> SortTable(List<CategoryDto> table, Guid? parentId, string space = "", string distance = "....")
    {
        var rows = table.Where(dto => dto.ParentId == parentId).ToList();
        if (!rows.Any()) return new List<CategoryDto>();
        var sortData = new List<CategoryDto>();
        foreach (var row in rows)
        {
            var spaceNext = space + distance;
            var dt = SortTable(table, row.Id, spaceNext, distance);
            row.Type = space;
            sortData.Add(row);

            if (dt.Count > 0) sortData.AddRange(dt);
        }
        return sortData;
    }
}