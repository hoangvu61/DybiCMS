@page "/ArticleCreate"
@using Web.Admin.Components
@using Web.Admin.Components.TextEditor
@using Web.Admin.Pages.Content.Components;
@using Web.Admin.Services;
@using Web.Models;
@using Web.Models.Enums;
@using Web.Models.SeedWork;
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@inject IToastService ToastService;
@inject IContentApiClient ContentApiClient;
@inject NavigationManager NavigationManager;
@inject ICompanyApiClient CompanyApiClient;

@if (Model == null || Categories == null)
{
    <LoadingIndicator></LoadingIndicator>
}
else
{
    @if (Categories.Count == 0)
    {
        <div class="callout callout-info">
            <h5><i class="fas fa-info"></i> Note:</h5>
            Chưa có danh mục nào. Vui lòng tạo danh mục trước: <a href="/categorylist">Đến quản lý danh mục</a>
        </div>
    }
    else
    {
        <EditForm Model="Model" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <section class="content-header">
                <div class="container-fluid">
                    <div class="row mb-2">
                        <div class="col"><h1 class="m-0">Thêm bài viết</h1></div>
                        <div class="col" style="text-align:right"><button type="submit" class="btn btn-success">Lưu</button></div>
                    </div>
                </div>
            </section>
            <section class="content" style="padding:0">
                <div class="container-fluid">
                    <div class="card card-outline card-info">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <div class="input-group input-group-sm mb-3" style="font-weight:bold">
                                            <span class="input-group-text">Tiêu đề</span>
                                            <InputText class="form-control form-control-sm" @bind-Value="Model.Title"></InputText>
                                        </div>
                                        <ValidationMessage For="()=> Model.Title"></ValidationMessage>
                                    </div>
                                    <div class="form-group">
                                        <div class="input-group input-group-sm mb-3">
                                            <span class="input-group-text">Danh mục</span>
                                            <InputSelect class="form-control form-control-sm" @bind-Value="Model.CategoryId">
                                                @foreach (var category in Categories)
                                                {
                                                    <option value="@category.Id">@category.Type @category.Titles.FirstOrDefault(e => e.Key == Model.LanguageCode).Value</option>
                                                }
                                            </InputSelect>
                                            <button class="btn btn-outline-secondary" type="button" @onclick="() => CreateCategoryControl.Show()">+</button>
                                        </div>
                                        <ValidationMessage For="()=>Model.CategoryId"></ValidationMessage>
                                    </div>
                                    <div class="form-group mb-3">
                                        <div class="input-group input-group-sm">
                                            <span class="input-group-text">Hình</span>
                                            <InputFile type="file" OnChange="LogoChange" accept="image/png, image/jpeg, image/gif, image/webp"></InputFile>
                                        </div>
                                    </div>
                                    <div class="form-group mb-3">
                                        <div class="input-group input-group-sm">
                                            <span class="input-group-text" id="inputGroup-sizing-sm">Thứ tự</span>
                                            <InputNumber class="form-control" @bind-Value="Model.Order"></InputNumber>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="tags">
                                            <label>Tags: </label>
                                            @foreach (var tag in Model.Tags)
                                            {
                                                <span class="tag">
                                                    @tag <img src="remove.png" @onclick="() => Model.Tags.Remove(tag)" />
                                                </span>
                                            }
                                            <div class="input-group input-group-sm mb-3" style="margin:0 !important">
                                                <span class="input-group-text" id="inputGroup-sizing-sm">Thêm Tag:</span>
                                                <input class="form-control" list="tags" value="@Tag" @onchange="@(e => Tag = e.Value.ToString())" />
                                                @if (Tags != null)
                                                {
                                                    <datalist id="tags">
                                                        @foreach (var tag in Tags)
                                                        {
                                                            <option value="@tag"></option>
                                                        }
                                                    </datalist>
                                                }
                                                <button class="btn btn-outline-secondary" type="button" @onclick="() =>{ if(!Model.Tags.Contains(Tag)) Model.Tags.Add(Tag); Tag = string.Empty; }">+</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="card">
                                        <div class="card-header">
                                            <h3 class="card-title">Các bài viết liên quan</h3>
                                        </div>
                                        <!-- /.card-header -->
                                        <div class="card-body">
                                            <table class="table table-sm table-bordered">
                                                <thead>
                                                    <tr>
                                                        <th>Tiêu đề</th>
                                                        <th style="text-align:right"><button type="button" class="btn btn-primary btn-xs" @onclick="() => ListArticleRelatedControl.Show()">Thêm</button></th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var item in Relateds)
                                                    {
                                                        <tr>
                                                            <td>@item.Value</td>
                                                            <td style="text-align:right"><button class="btn btn-danger btn-sm" @onclick="()=> Relateds.Remove(item.Key)">Xóa</button></td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                        <!-- /.card-body -->
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label>Mô tả ngắn:</label>
                                                <InputTextArea @bind-Value="Model.Brief" class="form-control form-control-sm" style="height:100px"></InputTextArea>
                                                <ValidationMessage For="()=> Model.Brief"></ValidationMessage>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label>HTML Code:</label>
                                                <InputTextArea @bind-Value="Model.HTML" class="form-control form-control-sm" style="height:100px"></InputTextArea>
                                                <ValidationMessage For="()=> Model.HTML"></ValidationMessage>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label>Mô tả chi tiết:</label>
                                        <BlazoredTextEditor @ref="@QuillHtml">
                                            <ToolbarContent>
                                                <select class="ql-header">
                                                    <option selected=""></option>
                                                    <option value="2"></option>
                                                    <option value="3"></option>
                                                    <option value="4"></option>
                                                    <option value="5"></option>
                                                </select>
                                                <span class="ql-formats">
                                                    <select class="ql-size">
                                                        <option value="small"></option>
                                                        <option selected=""></option>
                                                        <option value="large"></option>
                                                        <option value="huge"></option>
                                                    </select>
                                                </span>
                                                <span class="ql-formats">
                                                    <button class="ql-bold"></button>
                                                    <button class="ql-italic"></button>
                                                    <button class="ql-underline"></button>
                                                    <button class="ql-strike"></button>
                                                </span>
                                                <span class="ql-formats">
                                                    <select class="ql-color"></select>
                                                    <select class="ql-background"></select>
                                                </span>
                                                <span class="ql-formats">
                                                    <button class="ql-list" value="ordered"></button>
                                                    <button class="ql-list" value="bullet"></button>
                                                    <button class="ql-indent" value="-1"></button>
                                                    <button class="ql-indent" value="+1"></button>
                                                    <select class="ql-align">
                                                        <option selected=""></option>
                                                        <option value="center"></option>
                                                        <option value="right"></option>
                                                        <option value="justify"></option>
                                                    </select>
                                                </span>
                                                <span class="ql-formats">
                                                    <button class="ql-link"></button>
                                                </span>

                                                <span class="ql-formats">
                                                    <button type="button" class="btn btn-img" @onclick="InsertImageClick">
                                                        <img src="imageicon.png" style="border:hidden;width:20px;height:18px" />
                                                    </button>
                                                    <button type="button" class="btn btn-img" @onclick="InsertVideoClick">
                                                        <img src="videoicon.png" style="border:hidden;width:20px;height:18px" />
                                                    </button>
                                                </span>
                                                <span class="ql-formats">
                                                    <button type="button" class="btn btn-code" @onclick="ShowHTMLClick">&lt;/&gt;</button>
                                                </span>
                                            </ToolbarContent>
                                            <EditorContent>
                                                @* @((MarkupString)Model.Content)*@
                                            </EditorContent>
                                        </BlazoredTextEditor>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </EditForm>

        <ImageSelector @ref="ImageManagerControl" ImageSelected="InsertImage"></ImageSelector>
        <EmbedVideoInsert @ref="VideoInsertControl" InsertVideo="InsertVideo"></EmbedVideoInsert>
        <HTMLEdit @ref="EditHTML" TextChanged="ApplyHTML"></HTMLEdit>
        <CategoryCreate @ref="CreateCategoryControl" LanguageCode="@Model.LanguageCode" CloseEventCallbak="LoadCategories" Type="ART"></CategoryCreate>
        <ArticleListPopup @ref="ListArticleRelatedControl" EventCallbak="AddRelated"></ArticleListPopup>
    }
}
@code {
    public string Tag { set; get; }

    private ArticleCreateRequest Model { get; set; } = new ArticleCreateRequest();
    private List<CategoryDto> Categories { set; get; }
    private List<string> Tags { set; get; }
    private Dictionary<Guid, string> Relateds { set; get; } = new Dictionary<Guid, string>();

    private HTMLEdit EditHTML { get; set; }
    private ImageSelector ImageManagerControl { get; set; }
    private EmbedVideoInsert VideoInsertControl { get; set; }
    private BlazoredTextEditor QuillHtml;
    protected CategoryCreate CreateCategoryControl { set; get; }
    protected ArticleListPopup ListArticleRelatedControl { set; get; }

    protected async override Task OnInitializedAsync()
    {
        var languages = await CompanyApiClient.GetLanguageList(Guid.Empty);
        if (languages.Count == 0 || languages.Contains("vi")) Model.LanguageCode = "vi";
        else Model.LanguageCode = languages.First();

        Model.Id = Guid.NewGuid();
        await LoadCategories();
        if (Categories.Count > 0) Model.CategoryId = Categories.First().Id;
        Tags = await ContentApiClient.GetTags();
    }

    public async Task LoadCategories()
    {
        var categories = await ContentApiClient.GetCategories("ART");
        Categories = SortTable(categories, null, "", "---");
    }

    protected void AddRelated(ArticleDto related)
    {
        if (!Relateds.ContainsKey(related.Id))
            Relateds[related.Id] = related.Titles.Where(e => e.Key == Model.LanguageCode).Select(e => e.Value).FirstOrDefault();
    }

    protected async Task ShowHTMLClick()
    {
        Model.Content = await this.QuillHtml.GetHTML();
        EditHTML.Show(Model.Content);
    }
    protected async Task ApplyHTML(string content)
    {
        await this.QuillHtml.LoadHTMLContent(content);
        StateHasChanged();
    }

    protected async Task InsertImageClick()
    {
        ImageManagerControl.Show(true);
    }

    protected async Task InsertImage(ImageSelected img)
    {
        await this.QuillHtml.InsertImage(img.URL);

        var currentImageURL = $"<img src=\"{img.URL}\" alt=\"{img.URL}\">";
        var newImageURL = string.Empty;
        if (!string.IsNullOrEmpty(img.ALT)) newImageURL = $"<img src=\"{img.URL}\" alt=\"{img.ALT}\">";
        else newImageURL = $"<img src=\"{img.URL}\" alt=\"{Model.Title}\">";

        if (!string.IsNullOrEmpty(newImageURL))
        {
            Model.Content = await this.QuillHtml.GetHTML();
            Model.Content = Model.Content.Replace(currentImageURL, newImageURL);
            await this.QuillHtml.LoadHTMLContent(Model.Content);
        }

        StateHasChanged();
        ImageManagerControl.Show(false);
    }

    protected async Task InsertVideoClick()
    {
        VideoInsertControl.Show(true);
    }
    protected async Task InsertVideo(string embedVideo)
    {
        // Model.Content = await this.QuillHtml.GetHTML();
        // Model.Content += embedVideo;

        await this.QuillHtml.InsertImage("DybiEmbedVideoInsert");

        Model.Content = await this.QuillHtml.GetHTML();
        Model.Content = Model.Content.Replace("<img src=\"DybiEmbedVideoInsert\" alt=\"DybiEmbedVideoInsert\">", embedVideo);

        await this.QuillHtml.LoadHTMLContent(Model.Content);
        StateHasChanged();
    }

    private async void LogoChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(); // get the files selected by the users
        foreach (var file in files)
        {
            //var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
            var buf = new byte[file.Size]; // allocate a buffer to fill with the file's data
            using (var stream = file.OpenReadStream(file.Size))
            {
                await stream.ReadAsync(buf); // copy the stream to the buffer
            }
            Model.Image = new FileData
                {
                    Base64data = Convert.ToBase64String(buf),
                    ContentType = file.ContentType,
                    FileName = file.Name,
                    Type = FileType.ArticleImage
                };
        }
    }

    protected async Task HandleSubmit()
    {
        Model.Content = await this.QuillHtml.GetHTML();
        Model.Relateds = Relateds.Select(e => e.Key).ToList();
        var result = await ContentApiClient.CreateArticle(Model);
        if (result)
        {
            ToastService.ShowInfo("Thêm bài viết thành công");
            NavigationManager.NavigateTo($"/ArticleDetail/{Model.Id}");
        }
        else
        {
            ToastService.ShowError("Thêm bài viết không thành công");
        }
    }

    private List<CategoryDto> SortTable(List<CategoryDto> table, Guid? parentId, string space = "", string distance = "....")
    {
        var rows = table.Where(dto => dto.ParentId == parentId).ToList();
        if (!rows.Any()) return new List<CategoryDto>();
        var sortData = new List<CategoryDto>();
        foreach (var row in rows)
        {
            var spaceNext = space + distance;
            var dt = SortTable(table, row.Id, spaceNext, distance);
            row.Type = space;
            sortData.Add(row);

            if (dt.Count > 0) sortData.AddRange(dt);
        }
        return sortData;
    }
}
