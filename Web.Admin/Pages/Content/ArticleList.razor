@page "/ArticleList"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization;
@using Web.Admin.Components;
@using Web.Admin.Pages.Content.Components;
@using Web.Admin.Services;
@using Web.Models;
@using Web.Models.SeedWork;
@using Microsoft.Extensions.Configuration

@inject IConfiguration Configuration
@inject IToastService ToastService;
@inject IContentApiClient ContentApiClient;
@inject ICompanyApiClient CompanyApiClient;

<section class="content-header">
    <div class="container-fluid">
        <h1 class="m-0">Quản lý bài viết</h1>
    </div>
</section>

<section class="content">
    <div class="container-fluid">
        @if (Articles == null)
        {
            <LoadingIndicator></LoadingIndicator>
        }
        else
        {
            <div class="card card-outline card-info">
                <div class="card-header">
                    <h3 class="card-title">Danh sách bài viết</h3>
                </div>
                <div class="card-body">
                    <ArticleSearch @ref="ArticleSearchControl" OnSearch="SearchArticle"></ArticleSearch>
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Tên</th>
                                <th>Danh mục</th>
                                <th style="text-align:center">Hình</th>
                                <th style="text-align:center">Ngày</th>
                                <th style="text-align:center">lượt xem</th>
                                <th style="text-align:center">Thứ tự</th>
                                <th style="text-align:center">Sử dụng</th>
                                <th style="text-align:right">
                                    <a href="/ArticleCreate" class="btn btn-primary btn-sm">Thêm</a>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Articles)
                            {
                                <tr>
                                    <td>
                                        <table>
                                            @foreach (var title in item.Titles)
                                            {
                                                <tr>
                                                    @if (Languages != null && Languages.Count > 1)
                                                    {
                                                        <td style="border:0;padding:0">@title.Key: </td>
                                                    }
                                                    <td style="border:0;padding:0">@title.Value</td>
                                                </tr>
                                            }
                                        </table>
                                    </td>
                                    <td>
                                        <table>
                                        @foreach (var title in item.CategoryNames)
                                        {
                                            <tr>
                                                @if (Languages != null && Languages.Count > 1)
                                                {
                                                    <td style="border:0;padding:0">@title.Key: </td>
                                                }
                                                <td style="border:0;padding:0">@title.Value</td>
                                            </tr>
                                        }
                                        </table>
                                    </td>
                                    <td style="text-align:center"><img src="@(BackendApiUrl + "/" + item.Image.FullPath + "?DummyId=" + DateTime.Now.Ticks)" asp-append-version="true" width="50px" /></td>
                            <td style="text-align:center">@item.DisplayDate.ToString(Configuration["DateTimeFormat"])</td>
                                    <td style="text-align:center">
                                        @item.View
                                    </td>
                                    <td style="text-align: center;width:100px">
                                        <div class="input-group input-group-sm mb-3">
                                            <button class="btn btn-outline-secondary" @onclick="@((e) => {item.Order--; OrderChanged(item.Id, item.Order);})">&lt;</button>
                                            <span class="form-control">@item.Order</span>
                                            <button class="btn btn-outline-secondary" @onclick="@((e) => {item.Order++; OrderChanged(item.Id, item.Order);})">&gt;</button>
                                        </div>
                                    </td>
                                    <td class="form-switch" style="text-align: center; padding-left: 30px;">
                                        <input type="checkbox" checked="@item.IsPublished" class="form-check-input" role="switch" @onchange="@((e) => {item.IsPublished= bool.Parse(e.Value.ToString()); ApplyChanged(item.Id);})"></input>
                                    </td>
                                    <td style="text-align:right;width:100px">
                                <a href="/articledetail/@item.Id" class="btn btn-primary btn-sm">Xem</a>
                                        <button class="btn btn-danger btn-sm" @onclick="()=> OnDelete(item.Id)">Xóa</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="8">
                                    <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage"></Pagination>
                                </td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>

            <Confirmation ConfirmationMessage="Bạn có chắc chắn xóa?"
                      ConfirmationTitle="Xóa bài viết"
                      @ref="DeleteConfirmation"
                      ConfirmationChanged="OnConfirmDelete">
            </Confirmation>
        }
    </div>
</section>

@code {
    protected Confirmation DeleteConfirmation { set; get; }

    private const int PageSize = 20;
    private List<ArticleDto> Articles;
    private Guid DeleteId { set; get; }
    private List<string> Languages { get; set; }

    private ArticleSearch ArticleSearchControl { set; get; }
    private ArticleListSearch ArticleListSearch = new ArticleListSearch();
    public MetaData MetaData { get; set; } = new MetaData();

    private string BackendApiUrl { get; set; }

    [CascadingParameter]
    private Error Error { set; get; }

    protected override async Task OnInitializedAsync()
    {
        BackendApiUrl = Configuration["BackendApiUrl"];
        Languages = await CompanyApiClient.GetLanguageList(Guid.Empty);
        ArticleListSearch.PageSize = PageSize;
        await RefreshList(true);
    }

    public async Task RefreshList(bool result)
    {
        if (result)
        {
            try
            {
                var pagingResponse = await ContentApiClient.GetArticles(ArticleListSearch);
                Articles = pagingResponse.Items;
                MetaData = pagingResponse.MetaData;
            }
            catch (Exception ex)
            {
                Error.ProcessError(ex);
            }
        }
    }

    public async Task SearchArticle(ArticleListSearch articleListSearch)
    {
        ArticleListSearch = articleListSearch;
        ArticleListSearch.PageSize = PageSize;
        await RefreshList(true);
    }

    private async Task SelectedPage(int page)
    {
        ArticleListSearch.PageNumber = page;
        await RefreshList(true);
    }

    public async Task OnConfirmDelete(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await ContentApiClient.DeleteArticle(DeleteId);
            await RefreshList(true);
        }
    }
    public void OnDelete(Guid deleteId)
    {
        DeleteId = deleteId;
        DeleteConfirmation.Show();
    }

    public async void ApplyChanged(Guid id)
    {
        var result = await ContentApiClient.UpdatePublish(id);
        if (result) ToastService.ShowInfo("Cập nhật thành công");
        else ToastService.ShowError("Cập nhật không thành công");
    }
    public async void OrderChanged(Guid id, int order)
    {
        var result = await ContentApiClient.UpdateOrder(id, order);
        if (result)
        {
            ToastService.ShowInfo($"Đã cập nhật thứ tự thành [{order}] thành công");
            await RefreshList(true);
        }
        else ToastService.ShowError("Cập nhật không thành công");
    }
}