@page "/categorylist"
@attribute [Authorize]


@using Microsoft.AspNetCore.Authorization;
@using Web.Admin.Components;
@using Web.Admin.Features;
@using Web.Admin.Pages.Content.Components;
@using Web.Admin.Services;
@using Web.Models;
@using Web.Models.Enums;
@using Web.Models.SeedWork;

@inject IToastService ToastService;
@inject IContentApiClient ContentApiClient;
@inject ICompanyApiClient CompanyApiClient;

<section class="content-header">
    <div class="container-fluid">
        <h1 class="m-0">Quản lý danh mục </h1>
    </div>
</section>

<section class="content">
    <div class="container-fluid">
        @if (Categories == null)
        {
            <LoadingIndicator></LoadingIndicator>
        }
        else
        {
            <div class="row">
            <div class="col-md-4">
            <div class="callout callout-success">
                <div style="text-align:right">
                    <button class="btn btn-primary btn-xs" @onclick="()=> OpenCreatePopup()">Thêm</button>
                </div>
                    @if (Nodes != null)
                    {
                        <TreeView Nodes="Nodes" SelectNode="SelectCategory"></TreeView>
                    }
                </div>
            </div>
            <div class="col-md-8">
                    <CategoryDetail @ref="DetailCategory" LanguageCode="@LanguageCode" EventCallbak="GetCategories"></CategoryDetail>
            </div>
            </div>
            <CategoryCreate @ref="CreateCategory" LanguageCode="@LanguageCode" CloseEventCallbak="GetCategories"></CategoryCreate>
        }
    </div>
</section>

@code {
    protected CategoryCreate CreateCategory { set; get; }
    protected CategoryDetail DetailCategory { set; get; }

    private List<CategoryDto> Categories;
    private List<TreeNode> Nodes;

    [CascadingParameter]
    private Error Error { set; get; }

    private string LanguageCode { set; get; }

    protected override async Task OnInitializedAsync()
    {
        var languages = await CompanyApiClient.GetLanguageList(Guid.Empty);
        if (languages.Count == 0 || languages.Contains("vi")) LanguageCode = "vi";
        else LanguageCode = languages.First();

        await GetCategories();
    }

    private async Task GetCategories()
    {
        try
        {
            Categories = await ContentApiClient.GetCategories();
            var types = Categories.Select(e => e.Type).Distinct().ToList();
            Nodes = new List<TreeNode>();
            foreach (var type in types)
            {
                var nodeType = new TreeNode()
                    {
                        Id = null,
                        Text = DataSource.CategoryTypes.First(e => e.Key == type).Value,
                        Children = CreateNodes(Categories.Where(e => e.Type == type).ToList(), null),
                        Style = "font-weight:bold;"
                    };
                Nodes.Add(nodeType);
            }
        }
        catch (Exception ex)
        {
            Error.ProcessError(ex);
        }

    }

    public void OpenCreatePopup()
    {
        CreateCategory.Show();
    }

    protected async Task SelectCategory(object id)
    {
        if (id != null)
        {
            DetailCategory.Show((Guid)id);
        }
    }

    private List<TreeNode> CreateNodes(List<CategoryDto> table, Guid? parentId)
    {
        var rows = table.Where(dto => dto.ParentId == parentId).ToList();
        if (!rows.Any()) return new List<TreeNode>();
        var sortData = new List<TreeNode>();
        foreach (var row in rows)
        {
            var dt = CreateNodes(table, row.Id);
            var node = new TreeNode
                {
                    Id = row.Id,
                    Text = row.Titles.First(e => e.Key == LanguageCode).Value,
                    Style = row.IsPuslished ? "" : "text-decoration: line-through;color:#999"
                };
            if (dt.Count > 0) node.Children = dt;
            sortData.Add(node);
        }
        return sortData;
    }
}