@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization;
@using Web.Admin.Components;
@using Web.Admin.Pages.Content.Components;
@using Web.Admin.Services;
@using Web.Models;
@using Web.Models.Enums;
@using Web.Models.SeedWork;
@inject IToastService ToastService;
@inject IContentApiClient ContentApiClient;
@inject IFileService FileService;
@inject IAttributeApiClient AttributeApiClient;
@inject IConfiguration Configuration;

@if (Attributes != null && Attributes.Count > 0)
{
    <div class="card">
        <div class="card-header">
            <h4 class="card-title">Thông số kỹ thuật</h4>
        </div>
        <!-- /.card-header -->
        <div class="card-body">
            @foreach (var att in Attributes)
            {
                <div class="form-group">
                    @if (att.Type == "Number")
                    {
                        <div class="input-group input-group-sm mb-3">
                            <span class="input-group-text" id="inputGroup-sizing-sm">@att.Title</span>
                            <input type="number" class="form-control form-control-sm" value="@att.Value" @onchange="@(e => att.Value = e.Value.ToString())"></input>
                            <button class="btn btn-secondary btn-sm" type="button" @onclick="() => Onchange(att)">Lưu</button>
                        </div>
                    }
                    else if (att.Type == "Date")
                    {
                        <div class="input-group input-group-sm mb-3">
                            <span class="input-group-text" id="inputGroup-sizing-sm">@att.Title</span>
                            <input type="date" class="form-control form-control-sm" value="@att.Value" @onchange="@(e => att.Value = e.Value.ToString())"></input>
                            <button class="btn btn-secondary btn-sm" type="button" @onclick="() => Onchange(att)">Lưu</button>
                        </div>
                    }
                    else if (att.Type == "Color")
                    {
                        <div class="input-group input-group-sm mb-3">
                            <span class="input-group-text" id="inputGroup-sizing-sm">@att.Title</span>
                            <input type="color" class="form-control form-control-sm" value="@att.Value" @onchange="@(e => att.Value = e.Value.ToString())"></input>
                            <button class="btn btn-secondary btn-sm" type="button" @onclick="() => Onchange(att)">Lưu</button>
                        </div>
                    }
                    else if (att.Type == "Image")
                    {
                        <div class="input-group input-group-sm mb-3">
                            <span class="input-group-text" id="inputGroup-sizing-sm">@att.Title</span>
                            <InputFile id="InputFileWebIcon" type="file" OnChange="@((args) => ImageChange(args, att))" accept="image/png, image/jpeg, image/gif, image/webp"></InputFile>
                            <button class="btn btn-secondary btn-sm"type="button" style="position:absolute;right:0" @onclick="@(() => Onchange(att))">Lưu</button>
                            @if (!string.IsNullOrEmpty(att.Value))
                            {
                                <img src="@(BackendApiUrl + "/" + att.Value + "?DummyId=" + DateTime.Now.Ticks)" asp-append-version="true" width="100%" />
                            }
                        </div>
                    }
                    else if (att.Type == "Boolean")
                    {
                        <div class="row form-switch" style="padding:0">
                            <div class="col"><label class="form-check-label">@att.Title</label></div>
                            <div class="col" style="text-align:right;padding:0"><input type="checkbox" checked="@(att.Value.ToLower() == "true")" class="form-check-input" role="switch" @onchange="@((e) => {att.Value = e.Value.ToString();Onchange(att);})"></input></div>
                        </div>
                    }
                    else if (att.Type == "Check" && att.Values != null && att.Values.Count > 0)
                    {
                        var productAttributeIds = att.Value.Split(',', StringSplitOptions.RemoveEmptyEntries).Select(e => e.Trim()).ToList();
                        <label>@att.Title</label>
                        @foreach (var value in att.Values)
                        {
                            <div class="form-check">
                                <input class="form-check-input" name="@att.Id" type="checkbox" value="@value.Id" checked="@productAttributeIds.Contains(value.Id)" @onchange="@((e) => Oncheck(e, productAttributeIds, value.Id, att))">
                                <label class="form-check-label">@value.Title</label>
                            </div>
                        }
                    }
                    else if (att.Type == "Option" && att.Values != null && att.Values.Count > 0)
                    {
                        <label>@att.Title</label>
                        @foreach (var value in att.Values)
                        {
                            <div class="form-check">
                                <input class="form-check-input" name="@att.Id" type="radio" value="@value.Id" checked="@(att.Value == value.Id.ToString())" @onchange="@(() => {att.Value = value.Id.ToString();Onchange(att);})" />
                                <label class="form-check-label">@value.Title</label>
                            </div>
                        }
                    }
                    else if (att.Type == "Textarea")
                    {
                        <div class="input-group input-group-sm mb-3">
                            <span class="input-group-text" id="inputGroup-sizing-sm">@att.Title</span>
                            <textarea type="text" class="form-control form-control-sm" value="@att.Value" @onchange="@(e => att.Value = e.Value.ToString())"></textarea>
                            <button class="btn btn-secondary btn-sm" type="button" @onclick="() => Onchange(att)">Lưu</button>
                        </div>
                    }
                    else
                    {
                        <div class="input-group input-group-sm mb-3">
                            <span class="input-group-text" id="inputGroup-sizing-sm">@att.Title</span>
                            <input type="text" class="form-control form-control-sm" value="@att.Value" @onchange="@(e => att.Value = e.Value.ToString())"></input>
                            <button class="btn btn-secondary btn-sm" type="button" @onclick="() => Onchange(att)">Lưu</button>
                        </div>
                    }
                </div>
            }
        </div>
        <!-- /.card-body -->
    </div>
}
@code {
    [Parameter]
    public Guid ProductId { set; get; }
    [Parameter]
    public string LanguageCode { set; get; }
    [Parameter]
    public Guid CategoryId { set; get; }

    private string BackendApiUrl { get; set; }
    private List<AttributeSetupDto> Attributes { set; get; }

    [CascadingParameter]
    private Error Error { set; get; }

    protected async override Task OnParametersSetAsync()
    {
        BackendApiUrl = Configuration["BackendApiUrl"];
        if (ProductId != null && ProductId != Guid.Empty
            && !string.IsNullOrEmpty(LanguageCode))
        {
            await Load();
        }
    }

    public async Task Load()
    {
        Attributes = await ContentApiClient.GetAttributes(ProductId, LanguageCode, CategoryId);
        foreach (var att in Attributes)
        {
            if (att.Value == null) att.Value = string.Empty;
        }
        StateHasChanged();
    }

    private async Task Onchange(AttributeSetupDto dto)
    {
        var result = await ContentApiClient.UpdateAttribute(ProductId, dto.Id, new ItemAttributeDto { Id = dto.Id, LanguageCode = this.LanguageCode, Value = dto.Value, Image = dto.Image });
        if (result)
        {
            ToastService.ShowInfo($"Cập nhật [{dto.Title}] thành công");
            if (dto.Image != null) await Load();
        }
        else ToastService.ShowError($"Cập nhật [{dto.Title}] không thành công");
    }
    private async Task Oncheck(ChangeEventArgs e, List<string> productAttributeIds, string attributeId, AttributeSetupDto dto)
    {
        if (bool.Parse(e.Value.ToString())) productAttributeIds.Add(attributeId);
        else productAttributeIds.Remove(attributeId);
        dto.Value = string.Join(',', productAttributeIds);
        Onchange(dto);
    }
    private async void ImageChange(InputFileChangeEventArgs e, AttributeSetupDto attribute)
    {
        var files = e.GetMultipleFiles(); // get the files selected by the users
        if(files.Count > 0)
        {
            //var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
            var buf = new byte[files[0].Size]; // allocate a buffer to fill with the file's data
            using (var stream = files[0].OpenReadStream(files[0].Size))
            {
                await stream.ReadAsync(buf); // copy the stream to the buffer
            }

            attribute.Image = new FileData() { Type = FileType.Attibute };
            attribute.Image.Base64data = Convert.ToBase64String(buf);
            attribute.Image.ContentType = files[0].ContentType;
            attribute.Image.FileName = files[0].Name;
        }
    }
}