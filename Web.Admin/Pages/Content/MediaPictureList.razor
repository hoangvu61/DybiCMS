@page "/mediapicturelist"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims
@using Web.Admin.Components;
@using Web.Admin.Pages.Admin.Components;
@using Web.Admin.Pages.Content.Components;
@using Web.Admin.Services;
@using Web.Models;
@using Web.Models.Enums;
@using Web.Models.SeedWork;
@using Microsoft.Extensions.Configuration

@inject IConfiguration Configuration
@inject IToastService ToastService;
@inject IContentApiClient ContentApiClient
@inject ICompanyApiClient CompanyApiClient;
@inject NavigationManager NavigationManager;

<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-5">
                <h1 class="m-0">Quản lý hình ảnh</h1>
            </div>
            <div class="col-sm-7" style=" text-align:right">
                @if (Pictures == null || Pictures.Count == 0)
                {
                    <button style="margin-left:10px" class="btn btn-primary btn-sm" @onclick="()=> MediaPictureCreateDialog.Show()">Thêm hình ảnh</button>
                }
            </div>
        </div>
    </div>
</section>

<section class="content">
    <div class="container-fluid">
        @if (Pictures != null && Pictures.Count > 0)
        {
            <div class="card card-outline card-info">
                <div class="card-header">
                    <h3 class="card-title">Danh sách hình ảnh</h3>
                    <div class="card-tools">
                        <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                            <i class="fas fa-minus"></i>
                        </button>
                        <button type="button" class="btn btn-tool" data-card-widget="remove" title="Remove">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-12">
                            <MediaSearch @ref="MediaPictureSearchControl" Type="IMG" PageSize="39" OnSearch="SearchPicture"></MediaSearch>
                        </div>
                        <div class="col-6 col-sm-4 col-md-3">
                            <div class="info-box" style="height: 97px; text-align:center;vertical-align:middle;font-size:54px;cursor:pointer;display:block" @onclick="()=> MediaPictureCreateDialog.Show()">
                                +
                            </div>
                        </div>
                        @foreach (var item in Pictures)
                        {
                            <div class="col-6 col-sm-4 col-md-3">
                                <div class="info-box">
                                    <span class="info-box-icon bg-info elevation-1">
                                        <div class="position-relative p-3 bg-gray" style="text-align:center; padding:0px !important">
                                            <img src="@(BackendApiUrl + "/" + item.Image.FullPath + "?DummyId=" + DateTime.Now.Ticks)" asp-append-version="true" style="max-width:100%; height:75px" />
                                        </div>
                                    </span>
                                    <div style="margin-left:10px">
                                        <span class="info-box-text">
                                            @{
                                                var title = item.CategoryNames.Where(e => e.Key == LanguageCode).Select(e => e.Value).FirstOrDefault();
                                                if (title != null && title.Length > 10) title = title.Substring(0, 10) + "...";
                                            }
                                            @title
                                        </span>
                                        <span class="info-box-text">
                                            <div class="input-group input-group-sm mb-3" style="margin: 0px !important;">
                                                <button class="btn btn-outline-secondary" @onclick="@((e) => {item.Order--; OrderChanged(item.Id, item.Order);})">&lt;</button>
                                                <span class="form-control">@item.Order</span>
                                                <button class="btn btn-outline-secondary" @onclick="@((e) => {item.Order++; OrderChanged(item.Id, item.Order);})">&gt;</button>
                                            </div>
                                        </span>
                                        <span class="info-box-text form-switch" style="padding-left: 40px;">
                                            <input type="checkbox" checked="@item.IsPuslished" class="form-check-input" role="switch" @onchange="@((e) => {item.IsPuslished= bool.Parse(e.Value.ToString()); ApplyChanged(item.Id);})"></input>
                                            @if (UserId == item.CreateBy)
                                            {
                                                <button type="button" class="btn" @onclick="() => OnDelete(item.Id)" style="color:red;padding:0px">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            }
                                            else
                                            {
                                                <AuthorizeView Roles="ActionByThemself">
                                                    <NotAuthorized>
                                                        <button type="button" class="btn" @onclick="() => OnDelete(item.Id)" style="color:red;padding:0px">
                                                            <i class="fas fa-times"></i>
                                                        </button>
                                                    </NotAuthorized>
                                                </AuthorizeView>
                                            }
                                        </span>
                                    </div>
                                </div>
                            </div>
                        }
                        <div class="col-12">
                            <Pagination MetaData="PictureMetaData" Spread="2" SelectedPage="SelectedPagePicture"></Pagination>
                        </div>
                    </div>
                </div>
            </div>
        }

        <Confirmation ConfirmationMessage="Bạn có chắc chắn xóa hình?"
                      ConfirmationTitle="Xóa dữ liệu đa phương tiện"
                      @ref="DeleteConfirmation"
                      ConfirmationChanged="OnConfirmDelete">
        </Confirmation>
        <MediaPictureCreate @ref="MediaPictureCreateDialog" LanguageCode="@LanguageCode" CloseEventCallbak="GetPictures"></MediaPictureCreate>
    </div>
</section>

@code {
    protected Confirmation DeleteConfirmation { set; get; }
    protected MediaPictureCreate MediaPictureCreateDialog { set; get; }

    private MediaSearch MediaPictureSearchControl { set; get; }
    private MediaListSearch MediaPictureListSearch = new MediaListSearch() { Type = "IMG", PageSize= 39 };
    public MetaData PictureMetaData { get; set; } = new MetaData();

    private List<MediaDto> Pictures;

    private Guid UserId { set; get; }
    private Guid DeleteId { set; get; }
    private string BackendApiUrl { get; set; }

    [CascadingParameter]
    private Error Error { set; get; }

    private string LanguageCode { set; get; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (!string.IsNullOrEmpty(userId)) UserId = Guid.Parse(userId);
        else NavigationManager.NavigateTo("/logout", true);

        BackendApiUrl = Configuration["BackendApiUrl"];

        var languages = await CompanyApiClient.GetLanguageList(Guid.Empty);
        if (languages.Count == 0 || languages.Contains("vi")) LanguageCode = "vi";
        else LanguageCode = languages.First();

        await GetPictures();
    }

    private async Task GetPictures()
    {
        try
        {
            var pagingResponse = await ContentApiClient.GetMedias(MediaPictureListSearch);
            Pictures = pagingResponse.Items;
            PictureMetaData = pagingResponse.MetaData;
        }
        catch (Exception ex)
        {
            Error.ProcessError(ex);
        }
    }

    public void OnDelete(Guid deleteId)
    {
        DeleteId = deleteId;
        DeleteConfirmation.Show();
    }

    public async Task OnConfirmDelete(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            var result = await ContentApiClient.DeleteMedia(DeleteId);
            if (result)
            {
                ToastService.ShowWarning("Xóa thành công");
                await GetPictures();
            }
            else ToastService.ShowError("Xóa không thành công");
        }
    }

    private async Task SelectedPagePicture(int page)
    {
        MediaPictureListSearch.PageNumber = page;
        await GetPictures();
    }

    public async Task SearchPicture(MediaListSearch picureListSearch)
    {
        MediaPictureListSearch = picureListSearch;
        await GetPictures();
    }

    public async void ApplyChanged(Guid id)
    {
        var result = await ContentApiClient.UpdatePublish(id);
        if (result) ToastService.ShowInfo("Cập nhật thành công");
        else ToastService.ShowError("Cập nhật không thành công");
    }
    public async void OrderChanged(Guid id, int order)
    {
        var result = await ContentApiClient.UpdateOrder(id, order);
        if (result)
        {
            ToastService.ShowInfo($"Đã cập nhật thứ tự thành [{order}] thành công");
        }
        else ToastService.ShowError("Cập nhật không thành công");
    }
}