@using Microsoft.AspNetCore.Authorization;
@using Web.Admin.Services;
@using Web.Models;
@using Web.Admin.Components;
@using Web.Models.Enums

@inject IToastService ToastService;
@inject IOrderApiClient OrderApiClient;
@attribute [Authorize]

@if (ShowDialog)
{
    <div class="modal fade show d-block" id="modal-orderdelivery" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <EditForm Model="Model" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <div class="modal-header">
                        <h4 class="modal-title">Chỉnh sửa đơn vị vận chuyển</h4>
                        <button type="button" class="close" @onclick="() => {ShowDialog = false;}" aria-label="Close">
                            <span aria-hidden="true">×</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <div class="input-group input-group-sm">
                                <span class="input-group-text">Đơn vị giao hàng</span>
                                <InputSelect class="form-select" @bind-Value="@Model.DeliveryId">
                                    @foreach (var dilivery in DataSource.Deliveries)
                                    {
                                        <option value="@dilivery.Key">@dilivery.Value</option>
                                    }
                                </InputSelect>
                            </div>
                            <ValidationMessage For="()=>Model.DeliveryId"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <div class="input-group input-group-sm">
                                <span class="input-group-text">Mã vận chuyển</span>
                                <InputText class="form-control" @bind-Value="Model.DeliveryCode"></InputText>
                            </div>
                            <ValidationMessage For="()=> Model.DeliveryCode"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <div class="input-group input-group-sm">
                                <span class="input-group-text">Phí vận chuyển</span>
                                <InputNumber class="form-control" @bind-Value="Model.DeliveryFee"></InputNumber>
                                <span class="input-group-text">COD</span>
                                <InputCheckbox class="form-check-input" @bind-Value="Model.COD"></InputCheckbox>
                            </div>
                            <ValidationMessage For="()=> Model.DeliveryFee"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <div class="input-group input-group-sm">
                                <span class="input-group-text">Ghi chú</span>
                                <InputTextArea @bind-Value="Model.DeliveryNote" class="form-control"></InputTextArea>
                            </div>
                            <ValidationMessage For="()=> Model.DeliveryNote"></ValidationMessage>
                        </div>
                    </div>
                    <div class="modal-footer justify-content-between">
                        <button type="button" class="btn btn-default btn-xs" @onclick="() => {ShowDialog = false;}">Close</button>
                        <button type="submit" class="btn btn-success btn-xs" data-dismiss="modal">Lưu</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code{
    private bool ShowDialog { get; set; }

    private OrderDeliveryRequest Model { get; set; }

    private Guid OrderId { set; get; }

    [Parameter]
    public EventCallback CloseEventCallback { get; set; }

    protected async override Task OnInitializedAsync()
    {
        Model = new OrderDeliveryRequest();
        OrderId = Guid.Empty;
    }

    public async Task Show(Guid orderId, OrderDeliveryDto dilivery)
    {
        ShowDialog = true;
        OrderId = orderId;
        if (dilivery != null)
        {
            Model.COD = dilivery.COD;
            Model.DeliveryNote = dilivery.DeliveryNote;
            Model.DeliveryFee = dilivery.DeliveryFee;
            Model.DeliveryCode = dilivery.DeliveryCode;
            Model.DeliveryId = dilivery.DeliveryId;
        }
        StateHasChanged();
    }

    protected async Task HandleSubmit()
    {
        if (Model.DeliveryCode == null) Model.DeliveryCode = string.Empty;
        var result = await OrderApiClient.UpdateOrderDelivery(OrderId, Model);
        if (result)
        {
            ToastService.ShowInfo("Lưu thành công");
            ShowDialog = false;
            await CloseEventCallback.InvokeAsync(true);
        }
        else
        {
            ToastService.ShowError("Lưu không thành công");
        }
    }
}