@if (ShowFileManager)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <b class="modal-title">Chọn Hình</b>
                    <!-- Close Button -->
                    <button type="button" class="close"
                    @onclick="() => { ShowFileManager = false; }">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="dropzone @dropClass">
                        <label>
                            Kéo và thả hình vào đây
                            <br />hoặc click vào đây để chọn hình
                        </label>
                        <InputFile OnChange="AddFilesToQueue"
                        @ondragenter="HandleDragEnter"
                        @ondragleave="HandleDragLeave"
                        accept="image/png, image/jpeg, image/gif, image/webp"
                        disabled="@isUploading"
                        style="width:100%;height:100px;position:relative;top:-36px;margin-bottom:-40px;"
                        multiple />
                    </div>
                    @if (filesQueue.Count > 0)
                    {
                        <div class="card">
                            <div class="card-header">Đang tải lên</div>
                            <div class="card-body">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th></th>
                                            <th class="text-center" style="width:50px">%</th>
                                            <th style="width:170px;"></th>
                                            <th>Tên hình</th>
                                            <th class="text-end" style="width:80px;">Kích thước (KB)</th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var file in filesQueue.OrderByDescending(x => x.FileId))
                                        {
                                            var size = Math.Round((file.Size / 1024.00));
                                            var percentage = Math.Round(file.UploadedPercentage);
                                            <tr>
                                                <td class="text-center">
                                                    @if (file.HasBeenUploaded)
                                                    {
                                                        <span class="oi oi-circle-check text-success"></span>
                                                    }
                                                    else
                                                    {
                                                        <span class="oi oi-circle-check text-icon-light"></span>
                                                    }
                                                </td>
                                                <td class="text-end">@($"{percentage}%")</td>
                                                <td><progress value="@file.UploadedBytes" max="@file.Size" class="fileProgress"></progress></td>
                                                <td>@file.FileName.Substring(file.FileName.LastIndexOf('_') + 1, file.FileName.Length - (file.FileName.LastIndexOf('_') + 1))</td>
                                                <td class="text-end">@string.Format("{0:#,0.##}", @size)</td>

                                                <td class="text-end"><button type="button" class="btn btn-sm btn-link" disabled="@isUploading" @onclick="(() => RemoveFromQueue(file.FileId))"><span class="oi oi-trash" aria-hidden="true"></span></button></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>

                                <div class="btn-group w-100" role="group" aria-label="Basic mixed styles example">
                                    <button type="button" disabled="@isUploading" class="btn btn-sm btn-success" @onclick="UploadFileQueue">Tải lên</button>
                                    <button type="button" disabled="@isUploading" class="btn btn-sm btn-info" @onclick="ClearFileQueue">Xóa hết</button>
                                </div>

                            </div>
                        </div>
                    }
                    <hr>
                    @if (Images != null)
                    {
                        @foreach (var file in Images)
                        {
                            <table style="float:left; margin-left:10px">
                                <tr>
                                    <td colspan="2"><img src="@(BackendApiUrl + "/" + file.FullPath)" asp-append-version="true" height="100px" alt="@file.FileName" /></td>
                                </tr>
                                <tr>
                                    <td>
                                        <button class="btn btn-primary btn-sm" type="button" @onclick="() => SelectImage(file.FullPath)">Chọn</button>
                                    </td>
                                    <td>
                                        <button class="btn btn-danger btn-sm" type="button" @onclick="() => DeleteImage(file.FileName)">Xóa</button>
                                    </td>
                                </tr>
                            </table>
                        }
                    }
                </div>
            </div>
        </div>
    </div>

    <ImageAlt @ref="ImageAltControlt" SelectImage="SelectImageAddAlt"></ImageAlt>
}

@using Web.App.Services
@using Microsoft.AspNetCore.Authorization;
@using Web.App;
@using Web.Models;
@using Web.Models.Enums;
@using Web.Models.SeedWork;
@using Microsoft.Extensions.Configuration

@inject IFileService FileService;
@inject IConfiguration Configuration

@code {
    // ImageSelected is an EventCallback that will
    // notify the parent component when an image is selected
    // passing the url of the image to the parent component
    [Parameter] public EventCallback<string> ImageSelected { get; set; }
    [Parameter] public EventCallback<ImageSelected> ImageAddAlt { get; set; }
    private bool ShowFileManager = false;

    private List<FileData> Images { get; set; }
    private FileData FileImage { get; set; } = new FileData() {  };
    private string BackendApiUrl { get; set; }

    private bool isUploading = false;
    private string ErrorMessage = string.Empty;
    private string dropClass = string.Empty;
    private int maxAllowedFiles = 10;
    List<FileUploadProgress> filesQueue = new();

    private ImageAlt ImageAltControlt { get; set; }

    record FileUploadProgress(IBrowserFile File, string FileName, long Size, int FileId)
    {
        public IBrowserFile FileData { get; set; } = File;
        public int FileId { get; set; } = FileId;
        public long UploadedBytes { get; set; }
        public double UploadedPercentage => (double)UploadedBytes / (double)Size * 100d;
        public bool HasBeenUploaded { get; set; } = false;
    }

    protected override void OnInitialized()
    {
        BackendApiUrl = Configuration["BackendApiUrl"];
        Images = new List<FileData>();
    }

    public async void Show(bool paramSetting)
    {
        ShowFileManager = paramSetting;
        if (Images.Count == 0)
        {
            Images = await FileService.Get();
            StateHasChanged();
        }
    }

    private void AddFilesToQueue(InputFileChangeEventArgs e)
    {
        dropClass = string.Empty;
        ErrorMessage = string.Empty;

        if (e.FileCount > maxAllowedFiles)
        {
            ErrorMessage = $"Tối đa {maxAllowedFiles} hình một lần tải!";
        }
        else
        {
            var files = e.GetMultipleFiles(maxAllowedFiles);
            var fileCount = filesQueue.Count;

            foreach (var file in files)
            {
                var progress = new FileUploadProgress(file, $"{DateTime.Now.ToString("yyyyMMddHHmmss")}_{DateTime.Now.Millisecond}_{file.Name}", file.Size, fileCount);
                filesQueue.Add(progress);
                fileCount++;
            }
        }
    } //PlaceFilesInQue

    private async Task UploadFileQueue()
    {
        isUploading = true;
        await InvokeAsync(StateHasChanged);

        foreach (var file in filesQueue.OrderByDescending(x => x.FileId))
        {
            if (!file.HasBeenUploaded)
            {
                await UploadChunks(file);
                file.HasBeenUploaded = true;
                Images = await FileService.Get();
            }
        }

        isUploading = false;

        filesQueue.Clear();
    } //UploadFileQueue

    private async Task UploadChunks(FileUploadProgress file)
    {
        var TotalBytes = file.Size;
        long chunkSize = 400000;
        long numChunks = TotalBytes / chunkSize;
        long remainder = TotalBytes % chunkSize;
        var fileName = $"{DateTime.Now.ToString("yyyyMMddHHmmss")}_{DateTime.Now.Millisecond}_{file.FileName}";

        bool firstChunk = true;
        using (var inStream = file.FileData.OpenReadStream(file.Size))
        {
            for (int i = 0; i < numChunks; i++)
            {
                var buffer = new byte[chunkSize];
                await inStream.ReadAsync(buffer, 0, buffer.Length);

                var chunk = new FileData
                    {
                        Type = FileType.UploadImage,
                        UploadData = buffer,
                        FileName = fileName,
                        UploadedBytes = filesQueue[file.FileId].UploadedBytes,
                        FirstUpload = firstChunk
                    };
                if (remainder == 0 && i == numChunks - 1) chunk.LastUpload = true;

                await FileService.Upload(chunk);

                // Update our progress data and UI
                filesQueue[file.FileId].UploadedBytes += chunkSize;
                await InvokeAsync(StateHasChanged);
            }

            if (remainder > 0)
            {
                var buffer = new byte[remainder];
                await inStream.ReadAsync(buffer, 0, buffer.Length);

                if (TotalBytes > chunkSize) firstChunk = false;

                var chunk = new FileData
                    {
                        Type = FileType.UploadImage,
                        UploadData = buffer,
                        FileName = fileName,
                        UploadedBytes = filesQueue[file.FileId].UploadedBytes,
                        FirstUpload = firstChunk,
                        LastUpload = true
                    };

                await FileService.Upload(chunk);

                // Update our progress data and UI
                filesQueue[file.FileId].UploadedBytes += remainder;
                //await ListFiles();
                await InvokeAsync(StateHasChanged);
            }
        }
    } //UploadChunks

    private void RemoveFromQueue(int fileId)
    {
        var itemToRemove = filesQueue.SingleOrDefault(x => x.FileId == fileId);
        if (itemToRemove != null)
            filesQueue.Remove(itemToRemove);
    } //RemoveFromQueue

    private void ClearFileQueue()
    {
        filesQueue.Clear();
    } //ClearFileQueue

    void HandleDragEnter()
    {
        dropClass = "dropzone-active";
    } //HandleDragEnter
    void HandleDragLeave()
    {
        dropClass = string.Empty;
    } //HandleDragLeave

    private async Task SelectImage(string url)
    {
        var fullURL = BackendApiUrl + "/" + url;
        await ImageSelected.InvokeAsync(fullURL);
        ImageAltControlt.Show(fullURL);
    }

    private async Task SelectImageAddAlt(ImageSelected img)
    {
        await ImageAddAlt.InvokeAsync(img);
        ShowFileManager = false;
    }

    private async Task DeleteImage(string filename)
    {
        var result = await FileService.Delete(filename);
        if (result) Images = await FileService.Get();
    }
}
