@attribute [Authorize]

@using Web.App.Components
@using Web.App.Services
@using Microsoft.AspNetCore.Authorization;
@using Web.Models;
@using Web.Models.SeedWork;
@using Microsoft.Extensions.Configuration

@inject IConfiguration Configuration
@inject IToastService ToastService;
@inject IWarehouseApiClient WarehouseApiClient;

@if (ShowBox)
{
    <div class="modal fade show d-block" id="assignModel" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            @if (Products == null)
            {
                <LoadingIndicator></LoadingIndicator>
            }
            else
            {
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Chọn sản phẩm</h5>
                        <button type="button" class="close" data-dismiss="modal" @onclick="()=>Hide()" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <ProductSearch @ref="ProductSearchControl" OnSearch="SearchProduct"></ProductSearch>
                        <table class="table table-sm table-striped table-bordered">
                            <thead>
                                <tr>
                                    <th>Mã</th>
                                    <th>Tên</th>
                                    <th style="text-align:center">Hình</th>
                                    <th>Danh mục</th>
                                    <th>
                                        @if (AllowAddProduct)
                                        {
                                            <button class="btn btn-success btn-xs" @onclick="() => CreateDialog.Show()">Thêm</button>
                                        }
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Products)
                                {
                                    <tr>
                                        <td>@item.Code</td>
                                        <td>@item.Title</td>
                                        <td style="text-align:center"><img src="@(BackendApiUrl + "/" + item.Image.FullPath + "?DummyId=" + DateTime.Now.Ticks)" asp-append-version="true" width="50px" /></td>
                                        <td>@item.CategoryName</td>
                                        <td style="text-align:right;width:75px">
                                            <button class="btn btn-primary btn-xs" @onclick="() => Add(item)">Thêm</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="5">
                                        <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage"></Pagination>
                                    </td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            }
        </div>
    </div>
    <ProductCreate @ref="CreateDialog" CloseEventCallbak="Add"></ProductCreate>
}

@code {
    protected bool ShowBox { get; set; }
    private List<WarehouseProductDto> Products;

    [Parameter]
    public EventCallback<WarehouseProductDto> EventCallbak { get; set; }

    [Parameter]
    public bool AllowAddProduct { get; set; }

    protected ProductCreate CreateDialog { set; get; }
    private ProductSearch ProductSearchControl { set; get; }
    private ProductListSearch ProductListSearch = new ProductListSearch();
    public MetaData MetaData { get; set; } = new MetaData();

    private string BackendApiUrl { get; set; }

    [CascadingParameter]
    private Error Error { set; get; }

    private string LanguageCode { set; get; }

    protected override void OnInitialized()
    {
        BackendApiUrl = Configuration["BackendApiUrl"];

        ProductListSearch.PageSize = 5;
    }

    public async Task RefreshList(bool result)
    {
        if (result)
        {
            try
            {
                var pagingResponse = await WarehouseApiClient.GetProducts(ProductListSearch);
                Products = pagingResponse.Items;
                MetaData = pagingResponse.MetaData;
            }
            catch (Exception ex)
            {
                Error.ProcessError(ex);
            }
        }
    }

    public async Task SearchProduct(ProductListSearch productListSearch)
    {
        ProductListSearch = productListSearch;
        await RefreshList(true);
    }

    private async Task SelectedPage(int page)
    {
        ProductListSearch.PageNumber = page;
        await RefreshList(true);
    }

    public async Task Add(WarehouseProductDto product)
    {
        Hide();
        await EventCallbak.InvokeAsync(product);
    }

    public async Task Show()
    {
        ShowBox = true;
        if (Products == null) await RefreshList(true);
        StateHasChanged();
    }

    private void Hide()
    {
        ShowBox = false;
        StateHasChanged();
    }
}