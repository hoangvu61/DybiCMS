@using Web.App.Services
@using Web.Models;
@using System.IO;
@using Web.Models.Enums;
@using Web.Models.SeedWork;

@inject IToastService ToastService;
@inject IAttributeApiClient AttributeApiClient
@inject IWarehouseApiClient WarehouseApiClient;

@if (ShowDialog)
{
    <div class="modal fade show d-block" id="assignModel" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <EditForm Model="Model" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Thêm thuộc tính</h5>
                        <button type="button" class="close" data-dismiss="modal" @onclick="()=>Hide()" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <div class="input-group input-group-xs mb-2">
                                <span class="input-group-text">Mã thuộc tính</span>
                                <InputText class="form-control" @bind-Value="Model.Id"></InputText>
                            </div>
                            <ValidationMessage For="()=>Model.Id"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <div class="input-group input-group-xs mb-2">
                                <span class="input-group-text">Tên</span>
                                <InputText class="form-control" @bind-Value="Model.Title"></InputText>
                            </div>
                            <ValidationMessage For="()=>Model.Title"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <div class="input-group input-group-xs mb-2">
                                <span class="input-group-text">Kiểu thuộc tính:</span>
                                <InputSelect class="form-select" ValueExpression="@(()=>Model.Type)"
                                         Value="@Model.Type"
                                         ValueChanged="@((string value) => OnTypeChanged(value))">
                                    <option value="">Chọn kiểu thuộc tính</option>
                                    @foreach (var item in DataSource.AttributeTypes)
                                        {
                                            <option value="@item.Key">@item.Value</option>
                                        }
                                </InputSelect>
                            </div>
                            <ValidationMessage For="()=>Model.Type"></ValidationMessage>
                        </div>
                        @if (ShowSource && Sources != null)
                        {
                            <div class="form-group">
                                <div class="input-group input-group-xs mb-2">
                                    <span class="input-group-text">Nhóm thuộc tính:</span>
                                    <InputSelect class="form-control" @bind-Value="@Model.SourceId">
                                        @foreach (var item in Sources)
                                        {
                                            <option value="@item.Id">@item.Title</option>
                                        }
                                    </InputSelect>
                                </div>
                                <ValidationMessage For="()=>Model.SourceId"></ValidationMessage>
                            </div>
                        }
                        <div class="form-group">
                            <div class="input-group input-group-xs mb-2">
                                <span class="input-group-text">Thứ tự</span>
                                <InputNumber class="form-control" @bind-Value="Model.Priority" @bind-Value:format="N0"></InputNumber>
                            </div>
                            <ValidationMessage For="()=>Model.Priority"></ValidationMessage>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary btn-xs" @onclick="()=>Hide()" data-dismiss="modal">Đóng</button>
                        <button type="submit" class="btn btn-primary btn-xs">Thêm</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    protected bool ShowDialog { get; set; }
    protected bool ShowSource { get; set; }

    private AttributeOrderConfigDetailDto Model { set; get; } = new AttributeOrderConfigDetailDto();
    private List<TitleGuidDto> Sources { set; get; }

    [Parameter]
    public EventCallback<bool> CloseEventCallbak { get; set; }

    protected async Task OnTypeChanged(string type)
    {
        Model.Type = type;
        if (type == "Check" || type == "Option")
        {
            if (Sources == null) Sources = await AttributeApiClient.GetSourceNameList("vi");
            ShowSource = true;
            Model.SourceId = Sources.Select(e => e.Id).FirstOrDefault();
        }
        else
        {
            ShowSource = false;
        }
    }

    public async Task Show()
    {
        ShowDialog = true;
        Model.Id = string.Empty;
        StateHasChanged();
    }

    private void Hide()
    {
        Sources = null;
        ShowDialog = false;
        StateHasChanged();
    }

    protected async Task HandleSubmit()
    {
        if (string.IsNullOrEmpty(Model.Id)) Model.Id = Guid.NewGuid().ToString();
        if (Model.Type != "Check" && Model.Type != "Option") Model.SourceId = null;

        var result = await AttributeApiClient.CreateAttribute(Model);
        if (result)
        {
            ShowDialog = false;
            await CloseEventCallbak.InvokeAsync(true);
            ToastService.ShowInfo("Thêm thuộc tính thành công");
        }
        else
        {
            ToastService.ShowError("Thêm thuộc tính không thành công");
        }
    }
}