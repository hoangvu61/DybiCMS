@using Web.App.Services;
@using Web.Models;
@using System.IO;
@using Web.Models.Enums;
@using Web.Models.SeedWork;
@using Microsoft.Extensions.Configuration

@inject IToastService ToastService;
@inject IWarehouseApiClient WarehouseApiClient;
@inject IWebsiteApiClient WebsiteApiClient;

@if (ShowDialog && Model != null)
{
    <div class="modal fade show d-block" id="assignModel" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <EditForm Model="Model" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Kích hoạt Danh mục lên Website</h5>
                        <button type="button" class="close" data-dismiss="modal" @onclick="()=>Hide()" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <div class="input-group input-group-xs mb-2">
                                <span class="input-group-text">Trang dách sách</span>
                                <InputSelect class="form-select" @bind-Value="Model.ComponentList">
                                    @if (Components != null)
                                    {
                                        @foreach (var item in Components)
                                        {
                                            <option value="@item.ComponentName">@item.ComponentName - @item.Describe</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <ValidationMessage For="()=>Model.ComponentList"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <div class="input-group input-group-xs mb-2">
                                <span class="input-group-text">Trang chi tiết</span>
                                <InputSelect class="form-select" @bind-Value="Model.ComponentDetail">
                                    @if (Components != null)
                                    {
                                        @foreach (var item in Components)
                                        {
                                            <option value="@item.ComponentName">@item.ComponentName - @item.Describe</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <ValidationMessage For="()=>Model.ComponentDetail"></ValidationMessage>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary btn-xs" @onclick="()=>Hide()" data-dismiss="modal">Đóng</button>
                        <button type="submit" class="btn btn-primary btn-xs">Lưu</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    protected bool ShowDialog { get; set; }

    private WarehouseCategoryDto Model { set; get; }
    private List<TemplateComponentDto> Components { set; get; }

    [Parameter]
    public List<WarehouseCategoryDto> ListCategories { get; set; }

    [Parameter]
    public EventCallback<bool> CloseEventCallbak { get; set; }

    protected async override Task OnInitializedAsync()
    {
        Components = await WebsiteApiClient.GetComponents();
    }

    public void Show(WarehouseCategoryDto model)
    {
        ShowDialog = true;
        Model = model;
        if (string.IsNullOrEmpty(Model.ComponentList))
        {
            if (Components.Any(e => e.ComponentName == "Products")) Model.ComponentList = "Products";
            else Model.ComponentList = Components.Select(e => e.ComponentName).FirstOrDefault();

            if (Components.Any(e => e.ComponentName == "Product")) Model.ComponentDetail = "Product";
            else Model.ComponentDetail = Components.Select(e => e.ComponentName).FirstOrDefault();
        }
        StateHasChanged();
    }

    private async Task Hide()
    {
        ShowDialog = false;
        await CloseEventCallbak.InvokeAsync(false);
        StateHasChanged();
    }

    protected async Task HandleSubmit()
    {
        var result = await WarehouseApiClient.PublishCategory(Model);
        if (result)
        {
            ShowDialog = false;
            await CloseEventCallbak.InvokeAsync(true);
            ToastService.ShowInfo("Cập nhật hiển thị lên website thành công");
        }
        else ToastService.ShowError("Cập nhật hiển thị lên website không thành công");
    }
}