@using Web.App.Components
@using Web.App.Services;
@using Web.Models;
@using System.IO;
@inject IToastService ToastService;
@inject IWarehouseApiClient WarehouseApiClient;
@inject IJSRuntime JS

@if (ShowDialog)
{
    <div class="modal fade show d-block" id="assignModel" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Xem series</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="()=>Hide()" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <div><label>Sản phẩm:</label> @Model.Title @(!string.IsNullOrEmpty(Model.Code) ? "(Mã: " + Model.Code + ")" : "")</div>
                        <div><label>Danh mục:</label> @Model.CategoryName</div>
                    </div>
                    <hr />
                    @foreach (var type in Series.Select(e => e.Type).Distinct().ToList())
                    {
                        <div class="alert alert-secondary" role="alert">
                            @foreach (var seri in Series.Where(e => e.Type == type).ToList())
                            {
                                <span class="badge bg-info position-relative m-2">
                                    @seri <span @onclick="@(() => OnDelete(@seri.Seri))" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" style="cursor:pointer">x</span>
                                </span>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <Confirmation ConfirmationMessage="Bạn có chắc chắn xóa?"
                    ConfirmationTitle="Xóa số series"
                    @ref="DeleteConfirmation"
                    ConfirmationChanged="OnConfirmDelete">
    </Confirmation>
}

@code {
    protected Confirmation DeleteConfirmation { set; get; }
    private string DeleteSeries { set; get; }
    protected bool ShowDialog { get; set; }

    private WarehouseProductDto Model { set; get; } = new WarehouseProductDto();
    private List<ProductSeriDto> Series { set; get; } = new List<ProductSeriDto>();

    [Parameter]
    public EventCallback Callback { get; set; }

    public async Task Show(WarehouseProductDto model)
    {
        Model = model;
        Series = await WarehouseApiClient.SeriesByProduct(Model.Id);

        ShowDialog = true;
        StateHasChanged();
    }

    private void Hide()
    {
        ShowDialog = false;
        StateHasChanged();
    }

    public async Task OnConfirmDelete(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            var result = await WarehouseApiClient.DeleteSearies(Model.Id, DeleteSeries);
            if (result)
            {
                ToastService.ShowWarning($"Đã xóa {DeleteSeries}");
                await Callback.InvokeAsync();
                Series = await WarehouseApiClient.SeriesByProduct(Model.Id);
            }
            else ToastService.ShowError("Xóa seri không thành công");
        }
    }
    public void OnDelete(string deleteSeries)
    {
        DeleteSeries = deleteSeries;
        DeleteConfirmation.Show();
    }
}