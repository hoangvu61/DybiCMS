@using Web.Models;
@using System.IO;
@using Web.Models.Enums
@using Web.App.Services;
@using Web.App.Pages.Warehouses.Components
@using Web.App.Pages.Settings.Components

@inject IToastService ToastService;
@inject IWarehouseApiClient WarehouseApiClient;
@inject IJSRuntime JS

@if (ShowDialog)
{
    <div class="modal fade show d-block" id="assignModel" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@Model.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="()=>Hide()" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div><label class="form-label">Mã sản phẩm:</label> @Model.Code</div>
                    <div><label class="form-label">Danh mục:</label> @Model.CategoryName</div>
                    <div><label class="form-label">Giá nhập:</label> @Model.Price.ToString("N0")</div>
                    <div><label class="form-label">Số lượng seri / Số lượng tổng:</label></div>
                    <div class="text-center p-2" style="font-size:36px; font-weight:600;color: @(Seris.Count < Model.Quantity ? "red" : Seris.Count == Model.Quantity ? "blue" : "orange")">
                        @Seris.Count.ToString("N0") / @Model.Quantity.ToString("N0")
                    </div>
                    <div class="alert alert-secondary" role="alert">
                        <EditForm Model="Request" OnValidSubmit="HandleSubmit">
                            <div class="input-group input-group-xs mb-3">
                                <span class="input-group-text">Mã</span>
                                <InputText id="inputCode" class="form-control" @bind-Value="Request.Code" />
                                <button type="submit" class="btn btn-primary">Lưu</button>
                            </div>
                            @foreach (var seri in Seris)
                            {
                                <span class="badge bg-info text-dark" style="margin-right:5px">@seri</span>
                            }
                            @if (Seris.Count > 0)
                            {
                                <button type="button" class="badge bg-danger" @onclick="OpenDeleteCode">Xóa</button>
                            }
                        </EditForm>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-xs" @onclick="()=>Hide()" data-dismiss="modal">Đóng</button>
                </div>
            </div>
        </div>
    </div>
    <ProductCodeDelete @ref="ProductCodeDeleteDialog" CloseEventCallback="RemoveCode"></ProductCodeDelete>
}

@code {
    protected bool ShowDialog { get; set; }

    private WarehouseProductInputDto Model { set; get; }
    private WarehouseProductCodeRequest Request { set; get; } = new WarehouseProductCodeRequest();
    private WarehouseIOType IOType { set; get; }
    private List<string> Seris { set; get; }
    private bool IsChange { set; get; }
    private Guid IOId { set; get; }

    private ProductCodeDelete ProductCodeDeleteDialog { set; get; }

    [Parameter]
    public EventCallback<WarehouseProductInputDto> CloseEventCallback { set; get; }

    public async Task Show(Guid ioIdtId, WarehouseProductInputDto dto, WarehouseIOType ioType)
    {
        Model = dto;
        IOId = ioIdtId;
        IOType = ioType;
        if (IOType == WarehouseIOType.Input) Seris = await WarehouseApiClient.GetWarehouseInputProductCodes(IOId, Model.Id);
        else Seris = await WarehouseApiClient.GetWarehouseOutputProductCodes(IOId, Model.Id);
        ShowDialog = true;
        StateHasChanged();
        await JS.InvokeVoidAsync("setFocus", "#inputCode");
    }

    private async Task Hide()
    {
        if (IsChange)
        {
            Model.SeriCount = Seris.Count;
            await CloseEventCallback.InvokeAsync(Model);
        }
        ShowDialog = false;
        StateHasChanged();
    }

    private async Task OpenDeleteCode()
    {
        await ProductCodeDeleteDialog.Show(IOId, Model.Id, Seris, IOType);
    }
    private async Task RemoveCode()
    {
        if (IOType == WarehouseIOType.Input) Seris = await WarehouseApiClient.GetWarehouseInputProductCodes(IOId, Model.Id);
        else Seris = await WarehouseApiClient.GetWarehouseOutputProductCodes(IOId, Model.Id);
        StateHasChanged();
    }

    protected async Task HandleSubmit()
    {
        if (!string.IsNullOrEmpty(Request.Code))
        {
            var result = string.Empty;
            if (IOType == WarehouseIOType.Input) result = await WarehouseApiClient.CreateWarehouseInputProductCode(IOId, Model.Id, Request);
            else result = await WarehouseApiClient.CreateWarehouseOutputProductCode(IOId, Model.Id, Request);
            if (string.IsNullOrEmpty(result))
            {
                Seris.Add(Request.Code);
                ToastService.ShowInfo("Thêm mã thành công");
                Request.Code = string.Empty;
                IsChange = true;
            }
            else
            {
                ToastService.ShowError(result);
                Request.Code = string.Empty;
            }
        }
    }
}