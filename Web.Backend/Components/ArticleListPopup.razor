@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization;
@using Web.Backend.Components;
@using Web.Backend.Pages.Content.Components;
@using Web.Backend.Services;
@using Web.Models;
@using Web.Models.SeedWork;
@using Microsoft.Extensions.Configuration

@inject IConfiguration Configuration
@inject IToastService ToastService;
@inject IContentApiClient ContentApiClient;
@inject ICompanyApiClient CompanyApiClient;

@if (ShowBox)
{
    <div class="modal fade show d-block" id="assignModel" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
    @if (Articles == null)
        {
            <LoadingIndicator></LoadingIndicator>
        }
        else
        {
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Chọn bài viết</h5>
                        <button type="button" class="close" data-dismiss="modal" @onclick="()=>Hide()" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                    <div class="row">
                        <ArticleSearch @ref="ArticleSearchControl" OnSearch="SearchArticle"></ArticleSearch>
                    </div>
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Tên</th>
                                <th>Danh mục</th>
                                <th style="text-align:center">Ngày</th>
                                <th style="text-align:center">Thứ tự</th>
                                <th style="text-align:right">
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Articles)
                            {
                                <tr>
                                    <td>
                                            @item.Titles.Where(e => e.Key == LanguageCode).Select(e => e.Value).FirstOrDefault()
                                    </td>
                                    <td>
                                            @item.CategoryNames.Where(e => e.Key == LanguageCode).Select(e => e.Value).FirstOrDefault()
                                    </td>
                                    <td style="text-align:center">@item.DisplayDate.ToString(Configuration["DateTimeFormat"])</td>
                                    <td style="text-align: center;width:75px">@item.Order</td>
                                    <td style="text-align:right;width:75px">
                                            <button class="btn btn-primary btn-sm" @onclick="() => Add(item)">Thêm</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="5">
                                    <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage"></Pagination>
                                </td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        }
        </div>
    </div>
}
@code {
    protected bool ShowBox { get; set; }
    private List<ArticleDto> Articles;

    [Parameter]
    public EventCallback<ArticleDto> EventCallbak { get; set; }

    private ArticleSearch ArticleSearchControl { set; get; }
    private ArticleListSearch ArticleListSearch = new ArticleListSearch();
    public MetaData MetaData { get; set; } = new MetaData();

    [CascadingParameter]
    private Error Error { set; get; }

    private string LanguageCode { set; get; }

    protected override async Task OnInitializedAsync()
    {
        var languages = await CompanyApiClient.GetLanguageList(Guid.Empty);
        if (languages.Count == 0 || languages.Contains("vi")) LanguageCode = "vi";
        else LanguageCode = languages.First();

        ArticleListSearch.PageSize = 5;
    }

    public async Task RefreshList(bool result)
    {
        if (result)
        {
            try
            {
                var pagingResponse = await ContentApiClient.GetArticles(ArticleListSearch);
                Articles = pagingResponse.Items;
                MetaData = pagingResponse.MetaData;
            }
            catch (Exception ex)
            {
                Error.ProcessError(ex);
            }
        }
    }

    public async Task SearchArticle(ArticleListSearch articleListSearch)
    {
        ArticleListSearch = articleListSearch;
        await RefreshList(true);
    }

    private async Task SelectedPage(int page)
    {
        ArticleListSearch.PageNumber = page;
        await RefreshList(true);
    }

    public async Task Add(ArticleDto article)
    {
        Hide();
        await EventCallbak.InvokeAsync(article);
    }

    public async Task Show()
    {
        ShowBox = true;
        if (Articles == null) await RefreshList(true);
        StateHasChanged();
    }

    private void Hide()
    {
        ShowBox = false;
        StateHasChanged();
    }
}