@using Web.Backend.Services;
@using Web.Models;
@using Web.Backend.Components;
@using Web.Models.SeedWork;

@inject IToastService ToastService;
@inject IUserApiClient UserApiClient;

@if (ShowDialog)
{
    <div class="modal fade show d-block" id="assignModel" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Danh sách tài khoản</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="()=>Hide()" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" style="overflow-x:scroll">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>UserName</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Phone</th>
                                <th style="text-align:right">
                                    <button class="btn btn-primary btn-xs" @onclick="()=> OpenCreatePopup()">Thêm</button>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Users)
                            {
                                <tr>
                                    <td>@item.UserName</td>
                                    <td>@item.FirstName @item.LastName</td>
                                    <td>@item.Email</td>
                                    <td>@item.Phone</td>
                                    <td style="text-align:right">
                                        <button class="btn btn-success btn-xs" @onclick="()=> UpdateCompanyUser.Show(CompanyId, item.Id)">Sửa</button>
                                        <button class="btn btn-danger btn-xs" @onclick="()=> OnDelete(item.Id)">Xóa</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <Confirmation ConfirmationMessage="Bạn có chắc chắn xóa?"
              ConfirmationTitle="Xóa tài khoản"
              @ref="DeleteConfirmation"
              ConfirmationChanged="OnConfirmDelete">
    </Confirmation>

    <CompanyUserCreate @ref="CreateCompanyUser" CloseEventCallbak="RefreshList"></CompanyUserCreate>
    <CompanyUserUpdate @ref="UpdateCompanyUser" CloseEventCallbak="RefreshList"></CompanyUserUpdate>
}

@code {
    protected bool ShowDialog { get; set; }

    private Guid CompanyId { set; get; }
    private List<CompanyUserDto> Users = new List<CompanyUserDto>();
    private Guid DeleteUserId { set; get; }

    protected Confirmation DeleteConfirmation { set; get; }
    protected CompanyUserCreate CreateCompanyUser { set; get; }
    protected CompanyUserUpdate UpdateCompanyUser { set; get; }

    [CascadingParameter]
    private Error Error { set; get; }

    [Parameter]
    public EventCallback CloseEventCallbak { get; set; }

    public async Task RefreshList(bool loadListCompanise)
    {
        try
        {
            Users = await UserApiClient.GetUserByCompany(CompanyId);
            if (loadListCompanise) await CloseEventCallbak.InvokeAsync();
        }
        catch (Exception ex)
        {
            Error.ProcessError(ex);
        }
    }

    public async void Show(Guid companyId)
    {
        ShowDialog = true;
        CompanyId = companyId;
        await RefreshList(false);
        StateHasChanged();
    }

    private void Hide()
    {
        ShowDialog = false;
        StateHasChanged();
    }

    public void OpenCreatePopup()
    {
        CreateCompanyUser.Show(CompanyId);
    }

    public void OnDelete(Guid id)
    {
        DeleteUserId = id;
        DeleteConfirmation.Show();
    }

    public async Task OnConfirmDelete(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await UserApiClient.DeleteUser(CompanyId, DeleteUserId);
            await RefreshList(true);
        }
    }
}