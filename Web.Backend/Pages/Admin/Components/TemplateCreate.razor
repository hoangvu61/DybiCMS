@using Web.Backend.Services;
@using Web.Models;
@using System.IO;
@using Web.Models.Enums;
@using Web.Models.SeedWork;

@inject IToastService ToastService;
@inject ITemplateApiClient TemplateApiClient;

@if (ShowDialog)
{
    <div class="modal fade show d-block" id="assignModel" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-sm" role="document">
            <EditForm Model="Model" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Thêm Template</h5>
                        <button type="button" class="close" data-dismiss="modal" @onclick="()=>Hide()" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label class="col-form-label">Tên:</label>
                            <InputText class="form-control form-control-sm" @bind-Value="Model.TemplateName"></InputText>
                            <ValidationMessage For="()=> Model.TemplateName"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label class="col-form-label">Hình:</label>
                            <InputFile OnChange="OnInputFileChange" class="form-control form-control-sm" accept="image/png, image/jpeg, image/gif, image/webp"></InputFile>
                        </div>
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Model.IsPublic" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Dùng chung</label>
                            <ValidationMessage For="()=> Model.IsPublic"></ValidationMessage>
                        </div>
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Model.IsPublished" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Sử dụng</label>
                            <ValidationMessage For="()=> Model.IsPublished"></ValidationMessage>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary btn-xs" @onclick="()=>Hide()" data-dismiss="modal">Đóng</button>
                        <button type="submit" class="btn btn-primary btn-xs">Thêm</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    protected bool ShowDialog { get; set; }

    private TemplateDto Model { set; get; } = new TemplateDto();

    [Parameter]
    public EventCallback<bool> CloseEventCallbak { get; set; }

    public void Show()
    {
        ShowDialog = true;

        Model.IsPublic = true;
        Model.IsPublished = true;

        StateHasChanged();
    }

    private void Hide()
    {
        ShowDialog = false;
        StateHasChanged();
    }

    private async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(); // get the files selected by the users
        foreach (var file in files)
        {
            //var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
            var buf = new byte[file.Size]; // allocate a buffer to fill with the file's data
            using (var stream = file.OpenReadStream(file.Size))
            {
                await stream.ReadAsync(buf); // copy the stream to the buffer
            }
            Model.Image = new FileData { Base64data = Convert.ToBase64String(buf), ContentType = file.ContentType, FileName = file.Name, Type = FileType.TemplateImage }; // convert to a base64 string!!
        }
    }

    protected async Task HandleSubmit()
    {
        var result = await TemplateApiClient.CreateTemplate(Model);
        if (result)
        {
            ShowDialog = false;
            await CloseEventCallbak.InvokeAsync(true);
            ToastService.ShowInfo("Thêm template thành công");
        }
        else
        {
            ToastService.ShowError("Thêm template không thành công");
        }
    }
}