@using Web.Backend.Services;
@using Web.Models;
@using Web.Backend.Components;
@using Web.Models.SeedWork;

@inject IToastService ToastService;
@inject ITemplateApiClient TemplateApiClient;

@if (!string.IsNullOrEmpty(TemplateName))
{
    <div class="card card-outline card-info">
        <div class="card-header">
            <h3 class="card-title">Danh sách Position của Template <strong>@TemplateName</strong></h3>
        </div>
        <div class="card-body">
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>Component</th>
                    <th>Position</th>
                    <th>Mô tả</th>
                    <th style="text-align:right">
                        <button class="btn btn-primary btn-xs" @onclick="()=> OpenCreatePopup()">Thêm</button>
                    </th>
                </tr>
            </thead>
            <tbody>
                <TemplatePositionCreate @ref="CreateTemplatePosition" CloseEventCallbak="RefreshList"></TemplatePositionCreate>
                @if (Positions != null)
                {
                    @foreach (var item in Positions)
                    {
                        <tr>
                            <td>@item.ComponentName</td>
                            <td>@item.PositionName</td>
                            <td>@item.Describe</td>
                            <td style="text-align:right">
                                <button class="btn btn-success btn-xs" @onclick="()=> OpenUpdatePopup(item.ComponentName, item.PositionName)">Sửa</button>
                                <button class="btn btn-danger btn-xs" @onclick="()=> OnDelete(item.ComponentName, item.PositionName)">Xóa</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="4">
                        <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage"></Pagination>
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>
    </div>
    <Confirmation ConfirmationMessage="Bạn có chắc chắn xóa?"
              ConfirmationTitle="Xóa Position"
              @ref="DeleteConfirmation"
              ConfirmationChanged="OnConfirmDelete">
    </Confirmation>

    <TemplatePositionUpdate @ref="UpdateTemplatePosition" CloseEventCallbak="RefreshList"></TemplatePositionUpdate>
}

@code {
    private string TemplateName { set; get; }
    private List<TemplatePositionDto> Positions { set; get; }
    private string DeleteComponentName { set; get; }
    private string DeletePositionName { set; get; }

    protected Confirmation DeleteConfirmation { set; get; }
    protected TemplatePositionCreate CreateTemplatePosition { set; get; }
    protected TemplatePositionUpdate UpdateTemplatePosition { set; get; }

    public MetaData MetaData { get; set; } = new MetaData();
    private PagingParameters Paging = new PagingParameters(5);

    [CascadingParameter]
    private Error Error { set; get; }

    public async Task RefreshList()
    {
        try
        {
            var pagingResponse = await TemplateApiClient.GetTemplatePositionList(TemplateName, Paging);
            Positions = pagingResponse.Items;
            MetaData = pagingResponse.MetaData;
        }
        catch (Exception ex)
        {
            Error.ProcessError(ex);
        }
    }

    private async Task SelectedPage(int page)
    {
        Paging.PageNumber = page;
        await RefreshList();
    }

    public async void Show(string name)
    {
        TemplateName = name;

        await RefreshList();

        StateHasChanged();
    }

    public void OpenCreatePopup()
    {
        CreateTemplatePosition.Show(TemplateName);
    }
    public void OpenUpdatePopup(string componentName, string positionName)
    {
        UpdateTemplatePosition.Show(TemplateName, positionName, componentName);
    }

    public void OnDelete(string componentName, string positionName)
    {
        DeleteComponentName = componentName;
        DeletePositionName = positionName;
        DeleteConfirmation.Show();
    }

    public async Task OnConfirmDelete(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await TemplateApiClient.DeleteTemplatePosition(TemplateName, DeletePositionName, DeleteComponentName);
            await RefreshList();
        }
    }
}