@using Microsoft.Extensions.Configuration;
@using Web.Models.Enums;
@using Web.Models.SeedWork;
@using Web.Backend.Services;
@using Web.Models;

@inject IToastService ToastService;
@inject IConfiguration Configuration;
@inject IModuleConfigApiClient ModuleConfigApiClient;

<div class="card card-outline card-success">
        <div class="card-header">
            <h3 class="card-title">
                <i class="fas fa-edit"></i>
                Giao diện
            </h3>
        </div>
@if (Model != null)
{
        <EditForm Model="Model" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="card-body">
                <div class="callout">
                    <div class="form-group">
                        <label>Rộng:</label>
                        <InputNumber type="color" @bind-Value="Model.Width" class="form-control form-control-sm"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label>Cao:</label>
                        <InputNumber type="color" @bind-Value="Model.Height" class="form-control form-control-sm"></InputNumber>
                    </div>
                </div>
                <div class="callout">
                    <h5>Tiêu đề</h5>
                    <div class="form-group">
                        <label>Cỡ chữ:</label>
                        <InputNumber type="color" @bind-Value="Model.HeaderFontSize" class="form-control form-control-sm"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label>Màu chữ:</label>
                        <InputText type="color" @bind-Value="Model.HeaderFontColor" class="form-control form-control-sm"></InputText>
                    </div>
                    <div class="from-group">
                        <label>Nền:</label>
                        <div class="form-check form-check-inline">
                            <input name="headerbackground" type="radio" class="form-check-input" @onchange="@(() => {HeaderBackgroundType = 0;})" checked="@(HeaderBackgroundType == 0)" /> Không nền &nbsp;
                            <input name="headerbackground" type="radio" class="form-check-input" @onchange="@(() => {HeaderBackgroundType = 1;})" checked="@(HeaderBackgroundType == 1)" /> Màu &nbsp;
                            <input name="headerbackground" type="radio" class="form-check-input" @onchange="@(() => {HeaderBackgroundType = 2;})" checked="@(HeaderBackgroundType == 2)" /> Hình &nbsp;
                        </div>
                    </div>
                    <div class="from-group">
                        @if (HeaderBackgroundType == 1)
                        {
                            <InputText type="color" @bind-Value="Model.HeaderBackground" class="form-control"></InputText>
                        }
                        else if (HeaderBackgroundType == 2)
                        {
                            <InputFile type="file" OnChange="HeaderFileChange" accept="image/png, image/jpeg, image/gif, image/webp"></InputFile>
                            @if (Model.HeaderBackgroundFile != null && !string.IsNullOrEmpty(Model.HeaderBackgroundFile.FileName))
                            {
                                <img src="@(BackendApiUrl + "/" + Model.HeaderBackgroundFile.FullPath + "?DummyId=" + DateTime.Now.Ticks)" asp-append-version="true" width="100%" />
                            }
                        }
                    </div>
                </div>
                <div class="callout">
                    <h5>Nội dung</h5>
                    <div class="form-group">
                        <label>Cỡ chữ:</label>
                        <InputNumber type="color" @bind-Value="Model.BodyFontSize" class="form-control form-control-sm"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label>Màu chữ:</label>
                        <InputText type="color" @bind-Value="Model.BodyFontColor" class="form-control form-control-sm"></InputText>
                    </div>
                    <div class="from-group">
                        <label>Nền:</label>
                        <div class="form-check form-check-inline">
                            <input name="bodybackground" type="radio" class="form-check-input" @onchange="@(() => {BodyBackgroundType = 0;})" checked="@(BodyBackgroundType == 0)" /> Không nền &nbsp;
                            <input name="bodybackground" type="radio" class="form-check-input" @onchange="@(() => {BodyBackgroundType = 1;})" checked="@(BodyBackgroundType == 1)" /> Màu &nbsp;
                            <input name="bodybackground" type="radio" class="form-check-input" @onchange="@(() => {BodyBackgroundType = 2;})" checked="@(BodyBackgroundType == 2)" /> Hình &nbsp;
                        </div>
                    </div>
                    <div class="from-group">
                        @if (BodyBackgroundType == 1)
                        {
                            <InputText type="color" @bind-Value="Model.BodyBackground" class="form-control"></InputText>
                        }
                        else if (BodyBackgroundType == 2)
                        {
                            <InputFile type="file" OnChange="BodyFileChange" accept="image/png, image/jpeg, image/gif, image/webp"></InputFile>
                            @if (Model.BodyBackgroundFile != null && !string.IsNullOrEmpty(Model.BodyBackgroundFile.FileName))
                            {
                                <img src="@(BackendApiUrl + "/" + Model.BodyBackgroundFile.FullPath + "?DummyId=" + DateTime.Now.Ticks)" asp-append-version="true" width="100%" />
                            }
                        }
                    </div>
                </div>
            </div>
            <div class="card-footer" style="text-align:right">
                <button type="submit" class="btn btn-info btn-xs">Lưu</button>
            </div>
        </EditForm>
}
</div>

@code {
    [Parameter]
    public Guid ModuleConfigId { set; get; }

    private string BackendApiUrl { get; set; }
    private int HeaderBackgroundType { get; set; }
    private int BodyBackgroundType { get; set; }

    private ModuleConfigSkinDto Model { get; set; }

    protected override void OnInitialized()
    {
        BackendApiUrl = Configuration["BackendApiUrl"];
        HeaderBackgroundType = 0;
        BodyBackgroundType = 0;
    }

    protected async override Task OnParametersSetAsync()
    {
        await Load(ModuleConfigId);
    }

    private async Task Load(Guid moduleConfigId)
    {
        Model = await ModuleConfigApiClient.GetSkin(moduleConfigId);
        if (!string.IsNullOrEmpty(Model.HeaderBackground))
        {
            if (Model.HeaderBackgroundFile != null) HeaderBackgroundType = 2;
            else HeaderBackgroundType = 1;
        }
        if (!string.IsNullOrEmpty(Model.BodyBackground))
        {
            if (Model.BodyBackgroundFile != null) BodyBackgroundType = 2;
            else BodyBackgroundType = 1;
        } 
    }

    private async void HeaderFileChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(); // get the files selected by the users
        foreach (var file in files)
        {
            //var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
            var buf = new byte[file.Size]; // allocate a buffer to fill with the file's data
            using (var stream = file.OpenReadStream(file.Size))
            {
                await stream.ReadAsync(buf); // copy the stream to the buffer
            }
            Model.HeaderBackgroundFile = new FileData
                {
                    Base64data = Convert.ToBase64String(buf),
                    ContentType = file.ContentType,
                    FileName = file.Name,
                    Type = FileType.ModuleImage
                };
        }
    }

    private async void BodyFileChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(); // get the files selected by the users
        foreach (var file in files)
        {
            //var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
            var buf = new byte[file.Size]; // allocate a buffer to fill with the file's data
            using (var stream = file.OpenReadStream(file.Size))
            {
                await stream.ReadAsync(buf); // copy the stream to the buffer
            }
            Model.BodyBackgroundFile = new FileData
                {
                    Base64data = Convert.ToBase64String(buf),
                    ContentType = file.ContentType,
                    FileName = file.Name,
                    Type = FileType.ModuleImage
                };
        }
    }

    private async Task HandleSubmit()
    {
        if (HeaderBackgroundType == 0 
            || (HeaderBackgroundType == 2 
                && Model.HeaderBackgroundFile != null 
                && Model.HeaderBackgroundFile.Base64data != null))
            Model.HeaderBackground = "";
        if (BodyBackgroundType == 0
            || (BodyBackgroundType == 2
                && Model.BodyBackgroundFile != null
                && Model.BodyBackgroundFile.Base64data != null)) 
            Model.BodyBackground = "";
        var result = await ModuleConfigApiClient.UpdateSkin(ModuleConfigId, Model);
        if (result)
        {
            await Load(ModuleConfigId);
            StateHasChanged();
            ToastService.ShowInfo("Cập nhật thành công");
        }
        else ToastService.ShowError("Cập nhật không thành công");
    }

}
