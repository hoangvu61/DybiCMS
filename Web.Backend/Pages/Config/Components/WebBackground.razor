@using Microsoft.Extensions.Configuration;
@using Web.Models.Enums;
@using Web.Models.SeedWork;
@using Web.Backend.Services;
@using Web.Models;

@inject IToastService ToastService;
@inject IConfiguration Configuration;
@inject ICompanyApiClient CompanyApiClient;

@if(Model != null)
{
    <div class="card card-outline card-info">
        <EditForm Model="Model" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="card-body">
                <div class="form-group">
                    <div class="input-group input-group-sm">
                        <span class="input-group-text">Header</span>
                        <InputTextArea @bind-Value="Model.Header" class="form-control"></InputTextArea>
                    </div>
                    <ValidationMessage For="()=> Model.Header"></ValidationMessage>
                </div>
                <div class="form-group">
                    <div class="input-group input-group-sm">
                        <span class="input-group-text">Cỡ chữ</span>
                        <InputNumber @bind-Value="Model.FontSize" class="form-control"></InputNumber>
                    </div>
                    <ValidationMessage For="()=> Model.FontSize"></ValidationMessage>
                </div>
                <div class="form-group">
                    <div class="input-group input-group-sm">
                        <span class="input-group-text">Màu chữ</span>
                        <InputText type="color" @bind-Value="Model.FontColor" class="form-control"></InputText>
                    </div>
                    <ValidationMessage For="()=> Model.FontColor"></ValidationMessage>
                </div>
                <div class="from-group">
                        <label>Nền:</label>
                        <div class="form-check form-check-inline">
                            <input name="background" type="radio" class="form-check-input" @onchange="@(() => {BackgroundType = 0;})" checked="@(BackgroundType == 0)" /> Không nền &nbsp;
                            <input name="background" type="radio" class="form-check-input" @onchange="@(() => {BackgroundType = 1;})" checked="@(BackgroundType == 1)" /> Màu &nbsp;
                            <input name="background" type="radio" class="form-check-input" @onchange="@(() => {BackgroundType = 2;})" checked="@(BackgroundType == 2)" /> Hình &nbsp;
                        </div>
                </div>
                <div class="from-group">
                    @if (BackgroundType == 1)
                    {
                        <InputText type="color" @bind-Value="Model.Background" class="form-control"></InputText>
                        <ValidationMessage For="()=> Model.Background"></ValidationMessage>
                    }
                    else if (BackgroundType == 2)
                    {
                        <InputFile type="file" OnChange="OnInputFileChange" accept="image/png, image/jpeg, image/gif"></InputFile>
                        @if (!string.IsNullOrEmpty(BackgroundFile.FileName))
                        {
                            <img src="@(BackendApiUrl + "/" + BackgroundFile.FullPath + "?DummyId=" + DateTime.Now.Ticks)" asp-append-version="true" width="100%" />
                        }
                    }
                </div>
            </div>
            <div class="card-footer" style="text-align:right">
                <button type="submit" class="btn btn-success btn-xs">Lưu</button>
            </div>
        </EditForm>
    </div>
}

@code {
    [Parameter]
    public string? Header { set; get; }

    [Parameter]
    public string? FontColor { set; get; }

    [Parameter]
    public int FontSize { set; get; }

    [Parameter]
    public string? Background { set; get; }

    [Parameter]
    public Guid CompanyId { set; get; }

    private string BackendApiUrl { get; set; }
    private int BackgroundType { get; set; }

    private FileData BackgroundFile { get; set; } = new FileData() { Type = FileType.Background };
    private WebConfigRequest Model { get; set; }

    protected override void OnInitialized()
    {
        Model = new WebConfigRequest();
        BackendApiUrl = Configuration["BackendApiUrl"];
    }

    protected async override Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Header))
        {
            Model.Header = Header;
        }
        if (!string.IsNullOrEmpty(FontColor))
        {
            Model.FontColor = FontColor;
        }
        if (FontSize != 0)
        {
            Model.FontSize = FontSize;
        }
        if (!string.IsNullOrEmpty(Background))
        {
            Model.Background = Background;
            if (Model.Background.StartsWith('#')) BackgroundType = 1;
            else
            {
                BackgroundType = 2;
                BackgroundFile.FileName = Model.Background;
            }
        }
        if (CompanyId != Guid.Empty)
        {
            BackgroundFile.Folder = CompanyId.ToString();
        }
    }

    private async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(); // get the files selected by the users
        foreach (var file in files)
        {
            //var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
            var buf = new byte[file.Size]; // allocate a buffer to fill with the file's data
            using (var stream = file.OpenReadStream(file.Size))
            {
                await stream.ReadAsync(buf); // copy the stream to the buffer
            }

            BackgroundFile.Base64data = Convert.ToBase64String(buf);
            BackgroundFile.ContentType = file.ContentType;
            BackgroundFile.FileName = file.Name;
        }
    }

    private async Task HandleSubmit()
    {
        var result = await CompanyApiClient.UpdateWebConfig(Model);
        if (result) ToastService.ShowInfo("Cập nhật thành công");
        else ToastService.ShowError("Cập nhật không thành công");

        if (BackgroundType == 2)
        {
            if (BackgroundFile.Base64data != null)
            {
                result = await CompanyApiClient.UploadImage(BackgroundFile);
                if (result) ToastService.ShowInfo("Lưu hình nền thành công");
                else ToastService.ShowError("Lưu hình nền không thành công");
            }
        }
    }

}
