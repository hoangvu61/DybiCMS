@using Web.Backend.Components
@using Web.Backend.Services;
@using Web.Models;
@using System.IO;
@using Web.Models.Enums;
@using Web.Models.SeedWork;
@using Microsoft.Extensions.Configuration

@inject IToastService ToastService;
@inject IContentApiClient ContentApiClient;
@inject IConfiguration Configuration

@if (ShowDialog && Model != null)
{
    <div class="modal fade show d-block" id="assignModel" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <EditForm Model="Model" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Cập nhật liên kết</h5>
                        <button type="button" class="close" data-dismiss="modal" @onclick="()=>Hide()" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-12">
                                <LanguageOption CurrentLanguage="@Model.LanguageCode" SelectLanguage="LoadData"></LanguageOption>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <div class="input-group input-group-sm mb-3">
                                        <span class="input-group-text">Danh mục</span>
                                        <InputSelect class="form-control form-control-sm" ValueExpression="@(()=>Model.CategoryId)"
                                                     Value="@Model.CategoryId"
                                                     ValueChanged="@((Guid value) => OnCategoryChanged(value))">
                                            <option value="@Guid.Empty">Chọn danh mục cha</option>
                                            @if (Categories != null)
                                            {
                                                @foreach (var category in Categories)
                                                {
                                                    <option value="@category.Id">@category.Type @category.Titles.FirstOrDefault(e => e.Key == LanguageCode).Value</option>
                                                }
                                            }
                                        </InputSelect>
                                        <button class="btn btn-outline-secondary" type="button" @onclick="() => CreateCategoryControl.Show()">+</button>
                                    </div>
                                    <ValidationMessage For="()=>Model.CategoryId"></ValidationMessage>
                                </div>
                                <div class="form-group">
                                    <div class="input-group input-group-sm mb-3">
                                        <span class="input-group-text">Url:</span>
                                        <InputText class="form-control form-control-sm" @bind-Value="Model.Url"></InputText>
                                        <ValidationMessage For="()=> Model.Url"></ValidationMessage>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="input-group input-group-sm mb-3">
                                        <span class="input-group-text">Target:</span>
                                        <InputSelect class="form-control form-control-sm" @bind-Value="Model.Target">
                                            <option value="_self">Mở liên kết trong cùng một khung khi nó được nhấp vào</option>
                                            <option value="_blank">Mở liên kết trong một cửa sổ hoặc tab mới</option>
                                        </InputSelect>
                                        <ValidationMessage For="()=> Model.Target"></ValidationMessage>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="input-group input-group-sm mb-3">
                                        <span class="input-group-text">Tiêu đề:</span>
                                        <InputText class="form-control form-control-sm" @bind-Value="Model.Title"></InputText>
                                        <ValidationMessage For="()=> Model.Title"></ValidationMessage>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="input-group input-group-sm mb-3">
                                        <span class="input-group-text">Thứ tự:</span>
                                        <InputNumber class="form-control form-control-sm" @bind-Value="Model.Order"></InputNumber>
                                        <ValidationMessage For="()=> Model.Order"></ValidationMessage>
                                    </div>
                                </div>
                                <div class="form-check">
                                    <InputCheckbox @bind-Value="Model.IsPublished" class="form-check-input"></InputCheckbox>
                                    <label class="form-check-label">Sử dụng</label>
                                    <ValidationMessage For="()=> Model.IsPublished"></ValidationMessage>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <div class="input-group input-group-sm mb-3">
                                        <span class="input-group-text">Hình:</span>
                                        <InputFile OnChange="OnInputFileChange" class="form-control form-control-sm" accept="image/png, image/jpeg, image/gif"></InputFile>
                                    </div>
                                </div>
                                <img src="@(BackendApiUrl + "/" + Model.Image.FullPath)" asp-append-version="true" width="100%" />
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary btn-xs" @onclick="()=>Hide()" data-dismiss="modal">Đóng</button>
                        <button type="submit" class="btn btn-primary btn-xs">Lưu</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
    <CategoryCreate @ref="CreateCategoryControl" CloseEventCallbak="LoadCategories" Type="MID"></CategoryCreate>
}

@code {
    [Parameter]
    public Guid Id { get; set; }
    protected bool ShowDialog { get; set; }

    private MediaDetailDto Model { set; get; }
    private string BackendApiUrl { get; set; }
    private List<CategoryDto> Categories { set; get; }

    [Parameter]
    public EventCallback CloseEventCallbak { get; set; }

    protected CategoryCreate CreateCategoryControl { set; get; }

    [Parameter]
    public string LanguageCode { set; get; }

    protected async override Task OnInitializedAsync()
    {
        BackendApiUrl = Configuration["BackendApiUrl"];
    }

    protected async Task LoadData(string language)
    {
        Model = await ContentApiClient.GetMedia(Id, language);
    }

    public async Task Show(Guid id)
    {
        Id = id;
        await LoadData(LanguageCode);
        await LoadCategories(Guid.Empty);

        ShowDialog = true;
        StateHasChanged();
    }

    private async Task Hide()
    {
        ShowDialog = false;
        await CloseEventCallbak.InvokeAsync();
        StateHasChanged();
    }

    public async Task OnCategoryChanged(Guid categoryId)
    {
        Model.CategoryId = categoryId;
        var result = await ContentApiClient.UpdateMediaCategory(Model.Id, Model.CategoryId);
        if (result)
        {
            ToastService.ShowInfo("Thay đổi danh mục thành công");
            await LoadData(Model.LanguageCode);
        }
        else ToastService.ShowError("Thay đổi danh mục không thành công");
    }

    private async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(); // get the files selected by the users
        foreach (var file in files)
        {
            //var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
            var buf = new byte[file.Size]; // allocate a buffer to fill with the file's data
            using (var stream = file.OpenReadStream(file.Size))
            {
                await stream.ReadAsync(buf); // copy the stream to the buffer
            }

            if (Model.Image == null) Model.Image = new FileData { Type = FileType.MediaImage };
            Model.Image.Base64data = Convert.ToBase64String(buf);
            Model.Image.ContentType = file.ContentType;
            Model.Image.FileName = file.Name; 
        }
    }

    protected async Task HandleSubmit()
    {
        if (string.IsNullOrEmpty(Model.Url)) Model.Url = "/";
        var result = await ContentApiClient.UpdateMedia(Model);
        if (result)
        {
            ShowDialog = false;
            await LoadData(Model.LanguageCode);
            ToastService.ShowInfo("Lưu liên kết thành công");
        }
        else
        {
            ToastService.ShowError("Lưu liên kết không thành công");
        }
    }

    public async Task LoadCategories(Guid id)
    {
        var categories = await ContentApiClient.GetCategories("MID");
        Categories = SortTable(categories, null, "", "---");
        if (id != Guid.Empty) Model.CategoryId = id;
    }

    private List<CategoryDto> SortTable(List<CategoryDto> table, Guid? parentId, string space = "", string distance = "....")
    {
        var rows = table.Where(dto => dto.ParentId == parentId).ToList();
        if (!rows.Any()) return new List<CategoryDto>();
        var sortData = new List<CategoryDto>();
        foreach (var row in rows)
        {
            var spaceNext = space + distance;
            var dt = SortTable(table, row.Id, spaceNext, distance);
            row.Type = space;
            sortData.Add(row);

            if (dt.Count > 0) sortData.AddRange(dt);
        }
        return sortData;
    }
}