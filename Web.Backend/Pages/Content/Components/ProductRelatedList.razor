@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization;
@using Web.Backend.Components;
@using Web.Backend.Pages.Content.Components;
@using Web.Backend.Services;
@using Web.Models;
@using Web.Models.SeedWork;
@using Microsoft.Extensions.Configuration

@inject IConfiguration Configuration
@inject IToastService ToastService;
@inject IContentApiClient ContentApiClient;
@if (Relateds != null)
{
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Các sản phẩm liên quan</h3>
        </div>
        <!-- /.card-header -->
        <div class="card-body">
            <table class="table table-sm table-bordered">
                <thead>
                    <tr>
                        <th>Tiêu đề</th>
                        <th>Danh mục</th>
                        <th style="text-align:center">Hình</th>
                        <th style="text-align:center">Giá</th>
                        <th style="text-align:right"><button type="button" class="btn btn-primary btn-xs" @onclick="() => ListProductRelatedControl.Show()">Thêm</button></th>
                    </tr>
                </thead>
                <tbody>
                        @foreach (var item in Relateds)
                        {
                            <tr>
                                <td>
                                    <table>
                                        @foreach (var title in item.Titles)
                                        {
                                            <tr>
                                                <td style="border:0;padding:0">@title.Key: </td>
                                                <td style="border:0;padding:0">@title.Value</td>
                                            </tr>
                                        }
                                    </table>
                                </td>
                                <td>
                                    <table>
                                        @foreach (var title in item.CategoryNames)
                                        {
                                            <tr>
                                                <td style="border:0;padding:0">@title.Key: </td>
                                                <td style="border:0;padding:0">@title.Value</td>
                                            </tr>
                                        }
                                    </table>
                                </td>
                                <td style="text-align:center"><img src="@(BackendApiUrl + "/" + item.Image.FullPath)" asp-append-version="true" width="50px" /></td>
                                <td style="text-align:right">
                                    @string.Format("{0:#.00}", item.Price)
                                    @if (item.DiscountType == null)
                                    {
                                        if (item.DiscountType == 1)
                                        {
                                            var price = (item.Discount * item.Price) / 100;
                                            <span> (@price)</span>
                                        }
                                        else if (item.DiscountType == 2)
                                        {
                                            var price = item.Price - item.Discount;
                                            <span> (@price)</span>
                                        }
                                        else if (item.DiscountType == 3)
                                        {
                                            <span> (@item.Discount)</span>
                                        }
                                    }
                                </td>
                            <td style="text-align:right"><button class="btn btn-danger btn-xs" @onclick="()=> Remove(item.Id)">Xóa</button></td>
                            </tr>
                        }
                </tbody>
            </table>
        </div>
        <!-- /.card-body -->
    </div>

    <ProductListPopup @ref="ListProductRelatedControl" EventCallbak="AddRelated"></ProductListPopup>
}
@code {
    [Parameter]
    public Guid ItemId { set; get; }

    private List<ProductDto> Relateds { set; get; }
    private string BackendApiUrl { get; set; }

    [CascadingParameter]
    private Error Error { set; get; }

    private ProductListPopup ListProductRelatedControl { set; get; }

    protected override async Task OnInitializedAsync()
    {
        BackendApiUrl = Configuration["BackendApiUrl"];
    }


    protected async override Task OnParametersSetAsync()
    {
        if (ItemId != null && ItemId != Guid.Empty)
        {
            Relateds = await ContentApiClient.GetProductRelateds(ItemId);
        }
    }

    protected async Task AddRelated(ProductDto related)
    {
        if (related.Id == ItemId) ToastService.ShowWarning("Sản phẩm liên quan không thể là chính nó");
        else if (Relateds.Any(e => e.Id == related.Id)) ToastService.ShowWarning("Sản phẩm liên quan đã tồn tại");
        else
        {
            var result = await ContentApiClient.CreateRelated(ItemId, related.Id);
            if (result)
            {
                Relateds.Add(related);
                StateHasChanged();
                ToastService.ShowInfo("Đã thêm sản phẩm liên quan");
            }
            else ToastService.ShowError("Thêm sản phẩm liên quan không thành công");
        }
    }

    public async Task Remove(Guid articleId)
    {
        var result = await ContentApiClient.DeleteRelated(ItemId, articleId);
        if (result)
        {
            ToastService.ShowWarning("Đã xóa sản phẩm liên quan");
            Relateds.Remove(Relateds.First(e => e.Id == articleId));
            StateHasChanged();
        }
        else ToastService.ShowError("Xóa sản phẩm liên quan không thành công");
    }
}