@page "/EventDetail/{Id}"
@using Web.Backend.Components
@using Web.Backend.Pages.Content.Components;
@using Web.Backend.Services;
@using Web.Models;
@using Web.Models.SeedWork;
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@inject IToastService ToastService;
@inject IContentApiClient ContentApiClient;
@inject NavigationManager NavigationManager;
@inject ICompanyApiClient CompanyApiClient;

<section class="content-header">
    <div class="container-fluid">
        <h1 class="m-0">Chi tiết sự kiện</h1>        
    </div>
</section>

<section class="content">
    <div class="container-fluid">
    @if (Model== null)
        {
            <LoadingIndicator></LoadingIndicator>
        }
        else
        {
            <LanguageOption CurrentLanguage="@Model.LanguageCode" SelectLanguage="LoadData"></LanguageOption>
            <SEOItem @ref="SEOItemControl" LanguageCode="@Model.LanguageCode" ItemId="@Model.Id"></SEOItem>
            <EditForm Model="Model" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="card card-outline card-info">
                    <div class="card-header">
                        <h3 class="card-title">@Model.Title</h3>
                        <div style="float:right">
                            <button type="submit" class="btn btn-success btn-xs">Lưu</button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-7">
                                <div class="info-box bg-light">
                                    <div class="info-box-content">
                                        <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Ngày tạo: </lable> @Model.CreateDate.ToString(Configuration["DateTimeFormat"])</span>
                                        <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Lượt xem: </lable> @Model.View</span>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="input-group input-group-sm mb-3" style="font-weight:bold">
                                        <span class="input-group-text">Tiêu đề</span>
                                        <InputText class="form-control form-control-sm" @bind-Value="Model.Title"></InputText>
                                    </div>
                                    <ValidationMessage For="()=> Model.Title"></ValidationMessage>
                                </div>
                                <div class="form-group">
                                    <div class="input-group input-group-sm mb-3" style="font-weight:bold">
                                        <span class="input-group-text">Thời gian</span>
                                        <InputDate Type="InputDateType.DateTimeLocal" class="form-control form-control-sm" @bind-Value="Model.StartDate"></InputDate>
                                    </div>
                                    <ValidationMessage For="()=> Model.StartDate"></ValidationMessage>
                                </div>
                                <div class="form-group">
                                    <div class="input-group input-group-sm mb-3" style="font-weight:bold">
                                        <span class="input-group-text">Địa điểm</span>
                                        <InputText class="form-control form-control-sm" @bind-Value="Model.Place"></InputText>
                                    </div>
                                    <ValidationMessage For="()=> Model.Place"></ValidationMessage>
                                </div>
                                <div class="form-group">
                                    <div class="input-group input-group-sm mb-3">
                                        <span class="input-group-text" id="inputGroup-sizing-sm">Thứ tự</span>
                                        <InputNumber class="form-control" @bind-Value="Model.Order"></InputNumber>
                                    </div>
                                    <div class="row form-switch" style="padding:0">
                                        <div class="col"><label class="form-check-label">Hoạt dộng:</label></div>
                                        <div class="col" style="text-align:right;padding:0"><input type="checkbox" checked="@Model.IsPuslished" class="form-check-input" role="switch" @onchange="@((e) => {Model.IsPuslished = bool.Parse(e.Value.ToString()); ApplyChanged();})"></input></div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-5">
                                <div class="form-group">
                                    <label for="InputFileLogo">Hình:</label>
                                    <InputFile id="InputFileLogo" type="file" OnChange="LogoChange" accept="image/png, image/jpeg, image/gif"></InputFile>
                                    @if (Model.Image != null && !string.IsNullOrEmpty(Model.Image.FileName))
                                    {
                                        <img src="@(BackendApiUrl + "/" + Model.Image.FullPath + "?DummyId=" + DateTime.Now.Ticks)" asp-append-version="true" width="100%" />
                                    }
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label>Mô tả ngắn:</label>
                                    <InputTextArea @bind-Value="Model.Brief" class="form-control form-control-sm"></InputTextArea>
                                    <ValidationMessage For="()=> Model.Brief"></ValidationMessage>
                                </div>
                                <div class="form-group">
                                    <label>Mô tả chi tiết:</label>
                                    <BlazoredTextEditor @ref="@QuillHtml">
                                        <ToolbarContent>
                                            <select class="ql-header">
                                                <option selected=""></option>
                                                <option value="1"></option>
                                                <option value="2"></option>
                                                <option value="3"></option>
                                                <option value="4"></option>
                                                <option value="5"></option>
                                            </select>
                                            <span class="ql-formats">
                                                <button class="ql-bold"></button>
                                                <button class="ql-italic"></button>
                                                <button class="ql-underline"></button>
                                                <button class="ql-strike"></button>
                                            </span>
                                            <span class="ql-formats">
                                                <select class="ql-color"></select>
                                                <select class="ql-background"></select>
                                            </span>
                                            <span class="ql-formats">
                                                <button class="ql-list" value="ordered"></button>
                                                <button class="ql-list" value="bullet"></button>
                                            </span>
                                            <span class="ql-formats">
                                                <button class="ql-link"></button>
                                                <button type="button" class="btn btn-link" id="custom-button" @onclick="InsertImageClick">
                                                    <img src="imageIcon.png" style="border:hidden" />
                                                </button>
                                                <button type="button" class="btn btn-link" @onclick="ShowHTMLClick">H</button>
                                            </span>
                                        </ToolbarContent>
                                        <EditorContent>
                                            @* @((MarkupString)Model.Content)*@
                                        </EditorContent>
                                    </BlazoredTextEditor>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>

            <ImageSelector @ref="ImageManagerControl" ImageSelected="InsertImage"></ImageSelector>
            <HTMLEdit @ref="EditHTML" TextChanged="ApplyHTML"></HTMLEdit>
        }
    </div>
</section>

@code {
    private string BackendApiUrl { get; set; }

    [Parameter]
    public string Id { set; get; }

    private EventDetailDto Model { get; set; }

    private HTMLEdit EditHTML { get; set; }
    private ImageSelector ImageManagerControl { get; set; }
    protected SEOItem SEOItemControl { get; set; }
    private BlazoredTextEditor QuillHtml;

    private string LanguageCode { set; get; }

    protected async override Task OnInitializedAsync()
    {
        BackendApiUrl = Configuration["BackendApiUrl"];

        var languages = await CompanyApiClient.GetLanguageList(Guid.Empty);
        if (languages.Count == 0 || languages.Contains("vi")) LanguageCode = "vi";
        else LanguageCode = languages.First();

        if (string.IsNullOrEmpty(Id))
        {
            Model = new EventDetailDto();
        }
        else
        {
            LoadData(LanguageCode);
        }
    }

    public async Task LoadData(string languageCode)
    {
        Model = await ContentApiClient.GetEvent(Id, languageCode);

        StateHasChanged();

        await ApplyHTML(Model.Content);

        await SEOItemControl.Load();
    }

    protected async Task ShowHTMLClick()
    {
        Model.Content = await this.QuillHtml.GetHTML();
        EditHTML.Show(Model.Content);
    }
    protected async Task ApplyHTML(string content)
    {
        await this.QuillHtml.LoadHTMLContent(content);
        StateHasChanged();
    }

    protected async Task InsertImageClick()
    {
        ImageManagerControl.Show(true);
    }

    protected async Task InsertImage(string paramImageURL)
    {
        await this.QuillHtml.InsertImage(paramImageURL);

        ImageManagerControl.Show(true);
    }

    private async void LogoChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(); // get the files selected by the users
        foreach (var file in files)
        {
            //var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
            var buf = new byte[file.Size]; // allocate a buffer to fill with the file's data
            using (var stream = file.OpenReadStream(file.Size))
            {
                await stream.ReadAsync(buf); // copy the stream to the buffer
            }
            Model.Image.Base64data = Convert.ToBase64String(buf);
            Model.Image.ContentType = file.ContentType;
            Model.Image.FileName = file.Name;
        }
    }

    public async void ApplyChanged()
    {
        var result = await ContentApiClient.UpdatePublish(Model.Id);
        if (result)
        {
            if (Model.IsPuslished) ToastService.ShowWarning("Đã ẩn khỏi giao diện web");
            else ToastService.ShowInfo("Đã hiển thị trên giao diện web");
        }
        else ToastService.ShowError("Cập nhật không thành công");
    }

    protected async Task HandleSubmit()
    {
        Model.Content = await this.QuillHtml.GetHTML();

        var result = await ContentApiClient.UpdateEvent(Model);
        if (result)
        {
            ToastService.ShowInfo("Cập nhật sự kiện thành công");
            await LoadData(Model.LanguageCode);
        }
        else
        {
            ToastService.ShowError("Cập nhật sự kiện không thành công");
        }
    }

    private List<CategoryDto> SortTable(List<CategoryDto> table, Guid? parentId, string space = "", string distance = "....")
    {
        var rows = table.Where(dto => dto.ParentId == parentId).ToList();
        if (!rows.Any()) return new List<CategoryDto>();
        var sortData = new List<CategoryDto>();
        foreach (var row in rows)
        {
            var spaceNext = space + distance;
            var dt = SortTable(table, row.Id, spaceNext, distance);
            row.Type = space;
            //row.Title = space + row.Title;
            sortData.Add(row);

            if (dt.Count > 0) sortData.AddRange(dt);
        }
        return sortData;
    }
}
