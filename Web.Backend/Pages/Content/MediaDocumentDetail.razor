@page "/medialdocumentdetail/{Id}"
@using Web.Backend.Components
@using Web.Backend.Pages.Content.Components;
@using Web.Backend.Services;
@using Web.Models;
@using System.IO;
@using Web.Models.Enums;
@using Web.Models.SeedWork;
@using Microsoft.Extensions.Configuration

@inject IToastService ToastService;
@inject IContentApiClient ContentApiClient;
@inject IConfiguration Configuration
@inject ICompanyApiClient CompanyApiClient;

<section class="content-header">
    <div class="container-fluid">
        <h1 class="m-0">Chi tiết tài liệu</h1>
    </div>
</section>

<section class="content">
    <div class="container-fluid">
        @if (Model != null)
        {
                <LanguageOption CurrentLanguage="@Model.LanguageCode" SelectLanguage="LoadData"></LanguageOption>
            <SEOItem @ref="SEOItemControl" LanguageCode="@Model.LanguageCode" ItemId="@Model.Id"></SEOItem>
                <EditForm Model="Model" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <div class="card card-outline card-info">
                        <div class="card-header">
                            <h3 class="card-title">@Model.Title</h3>
                            <div style="float:right">
                                <button type="submit" class="btn btn-success btn-xs">Lưu</button>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <div class="input-group input-group-sm mb-3">
                                            <span class="input-group-text">Tiêu đề:</span>
                                            <InputText class="form-control form-control-sm" @bind-Value="Model.Title"></InputText>
                                            <ValidationMessage For="()=> Model.Title"></ValidationMessage>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="input-group input-group-sm mb-3">
                                            <span class="input-group-text">Danh mục</span>
                                            <InputSelect class="form-control form-control-sm" ValueExpression="@(()=>Model.CategoryId)"
                                                         Value="@Model.CategoryId"
                                                         ValueChanged="@((Guid value) => OnCategoryChanged(value))">
                                                @foreach (var category in Categories)
                                                {
                                                    <option value="@category.Id">@category.Type @category.Titles.FirstOrDefault(e => e.Key == LanguageCode).Value</option>
                                                }
                                            </InputSelect>
                                            <button class="btn btn-outline-secondary" type="button" @onclick="() => CreateCategoryControl.Show()">+</button>
                                        </div>
                                        <ValidationMessage For="()=>Model.CategoryId"></ValidationMessage>
                                    </div>
                                    <div class="form-group">
                                        <div class="input-group input-group-sm mb-3">
                                            <span class="input-group-text">Url:</span>
                                            <InputText class="form-control form-control-sm" @bind-Value="Model.Url"></InputText>
                                            <ValidationMessage For="()=> Model.Url"></ValidationMessage>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label>Mô tả ngắn:</label>
                                        <InputTextArea @bind-Value="Model.Brief" class="form-control form-control-sm" style="height:150px"></InputTextArea>
                                        <ValidationMessage For="()=> Model.Brief"></ValidationMessage>
                                    </div>
                                    <div class="form-group">
                                        <div class="input-group input-group-sm mb-3">
                                            <span class="input-group-text">Thứ tự:</span>
                                            <InputNumber class="form-control form-control-sm" @bind-Value="Model.Order"></InputNumber>
                                            <ValidationMessage For="()=> Model.Order"></ValidationMessage>
                                        </div>
                                    </div>
                                    <div class="form-check">
                                        <InputCheckbox @bind-Value="Model.IsPublished" class="form-check-input"></InputCheckbox>
                                        <label class="form-check-label">Sử dụng</label>
                                        <ValidationMessage For="()=> Model.IsPublished"></ValidationMessage>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <div class="input-group input-group-sm mb-3">
                                            <span class="input-group-text">Hình:</span>
                                            <InputFile OnChange="OnInputFileChange" class="form-control form-control-sm" accept="image/png, image/jpeg, image/gif"></InputFile>
                                        </div>
                                    </div>
                                    <img src="@(BackendApiUrl + "/" + Model.Image.FullPath)" asp-append-version="true" width="100%" />
                                    <AttributeList @ref="AttributeListControl" ProductId="Model.Id" LanguageCode="@Model.LanguageCode" CategoryId="Model.CategoryId"></AttributeList>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label>Mô tả chi tiết:</label>
                                        <BlazoredTextEditor @ref="@QuillHtml">
                                            <ToolbarContent>
                                                <select class="ql-header">
                                                    <option selected=""></option>
                                                    <option value="2"></option>
                                                    <option value="3"></option>
                                                    <option value="4"></option>
                                                    <option value="5"></option>
                                                </select>
                                                <span class="ql-formats">
                                                    <button class="ql-bold"></button>
                                                    <button class="ql-italic"></button>
                                                    <button class="ql-underline"></button>
                                                    <button class="ql-strike"></button>
                                                </span>
                                                <span class="ql-formats">
                                                    <select class="ql-color"></select>
                                                    <select class="ql-background"></select>
                                                </span>
                                                <span class="ql-formats">
                                                    <button class="ql-list" value="ordered"></button>
                                                    <button class="ql-list" value="bullet"></button>
                                                </span>
                                                <span class="ql-formats">
                                                    <button class="ql-link"></button>
                                                    <button type="button" class="btn btn-link" id="custom-button" @onclick="InsertImageClick">
                                                        <img src="imageIcon.png" style="border:hidden" />
                                                    </button>
                                                    <button type="button" class="btn btn-link" @onclick="ShowHTMLClick">H</button>
                                                </span>
                                            </ToolbarContent>
                                            <EditorContent>
                                                @* @((MarkupString)Model.Content)*@
                                            </EditorContent>
                                        </BlazoredTextEditor>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </EditForm>


            <ImageSelector @ref="ImageManagerControl" ImageSelected="InsertImage"></ImageSelector>
            <HTMLEdit @ref="EditHTML" TextChanged="ApplyHTML"></HTMLEdit>
            <CategoryCreate @ref="CreateCategoryControl" LanguageCode="@LanguageCode" CloseEventCallbak="LoadCategories" Type="MID"></CategoryCreate>
        }
    </div>
</section>
@code {
    [Parameter]
    public string Id { set; get; }

    private MediaDetailDto Model { set; get; }
    private string BackendApiUrl { get; set; }

    private List<CategoryDto> Categories { set; get; }
    protected CategoryCreate CreateCategoryControl { set; get; }
    protected AttributeList AttributeListControl { get; set; }
    protected SEOItem SEOItemControl { get; set; }

    private HTMLEdit EditHTML { get; set; }
    private ImageSelector ImageManagerControl { get; set; }
    private BlazoredTextEditor QuillHtml;

    private string LanguageCode { set; get; }

    protected async override Task OnInitializedAsync()
    {
        BackendApiUrl = Configuration["BackendApiUrl"];

         var languages = await CompanyApiClient.GetLanguageList(Guid.Empty);
        if (languages.Count == 0 || languages.Contains("vi")) LanguageCode = "vi";
        else LanguageCode = languages.First();

        await LoadCategories(Guid.Empty);
        LoadData(LanguageCode);
    }

    public async Task LoadData(string languageCode)
    {
        Model = await ContentApiClient.GetMedia(Guid.Parse(Id), languageCode);
        StateHasChanged();

        await ApplyHTML(Model.Content);

        await SEOItemControl.Load();
    }

    public async Task LoadCategories(Guid id)
    {
        var categories = await ContentApiClient.GetCategories("MID");
        Categories = SortTable(categories, null, "", "---");
    }
    public async Task OnCategoryChanged(Guid categoryId)
    {
        Model.CategoryId = categoryId;
        var result = await ContentApiClient.UpdateMediaCategory(Model.Id, Model.CategoryId);
        if (result)
        {
            ToastService.ShowInfo("Thay đổi danh mục thành công");
            await AttributeListControl.Load();
        }
        else ToastService.ShowError("Thay đổi danh mục không thành công");
    }

    protected async Task ShowHTMLClick()
    {
        Model.Content = await this.QuillHtml.GetHTML();
        EditHTML.Show(Model.Content);
    }
    protected async Task ApplyHTML(string content)
    {
        var count = 0;
        while (count < 10)
        {
            try
            {
                if (content == null) content = string.Empty;
                await this.QuillHtml.LoadHTMLContent(content);
                StateHasChanged();
                count = 10;
            }
            catch
            {
                await Task.Delay(100);
                count++;
            }
        }
    }

    protected async Task InsertImageClick()
    {
        ImageManagerControl.Show(true);
    }

    protected async Task InsertImage(string paramImageURL)
    {
        await this.QuillHtml.InsertImage(paramImageURL);

        ImageManagerControl.Show(true);
    }

    private async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(); // get the files selected by the users
        foreach (var file in files)
        {
            //var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
            var buf = new byte[file.Size]; // allocate a buffer to fill with the file's data
            using (var stream = file.OpenReadStream(file.Size))
            {
                await stream.ReadAsync(buf); // copy the stream to the buffer
            }

            if (Model.Image == null) Model.Image = new FileData { Type = FileType.MediaImage };
            Model.Image.Base64data = Convert.ToBase64String(buf);
            Model.Image.ContentType = file.ContentType;
            Model.Image.FileName = file.Name;
        }
    }

    protected async Task HandleSubmit()
    {
        if (string.IsNullOrEmpty(Model.Url) && string.IsNullOrEmpty(Model.Embed))
        {
            ToastService.ShowError("URL không được để trống");
        }
        else
        {
            Model.Content = await this.QuillHtml.GetHTML();
            var result = await ContentApiClient.UpdateMedia(Model);
            if (result)
            {
                ToastService.ShowInfo("Lưu tài liệu thành công");
            }
            else
            {
                ToastService.ShowError("Lưu tài liệu không thành công");
            }
        }
    }

    private List<CategoryDto> SortTable(List<CategoryDto> table, Guid? parentId, string space = "", string distance = "....")
    {
        var rows = table.Where(dto => dto.ParentId == parentId).ToList();
        if (!rows.Any()) return new List<CategoryDto>();
        var sortData = new List<CategoryDto>();
        foreach (var row in rows)
        {
            var spaceNext = space + distance;
            var dt = SortTable(table, row.Id, spaceNext, distance);
            row.Type = space;
            sortData.Add(row);

            if (dt.Count > 0) sortData.AddRange(dt);
        }
        return sortData;
    }
}