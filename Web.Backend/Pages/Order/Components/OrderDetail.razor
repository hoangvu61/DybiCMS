@using Web.Backend.Components;
@using Web.Backend.Services;
@using Web.Models;
@using Web.Models.Enums;
@using Web.Models.SeedWork;
@using Blazored.TextEditor;

@inject IToastService ToastService;
@inject IOrderApiClient OrderApiClient;
@inject IConfiguration Configuration;

@if (ShowBox && Model != null && Model.Id != Guid.Empty)
{
    <div class="modal fade show d-block" id="assignModel" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-scrollable modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Chi tiết đơn hàng</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="()=>Hide()" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card card-outline card-info">
                        <div class="card-header">
                            <h3 class="card-title">Đơn hàng: <strong>@Model.Id</strong></h3>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col">
                                    <div class="info-box bg-light">
                                        <div class="info-box-content">
                                            <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Ngày tạo: </lable> @Model.CreateDate.ToString(Configuration["DateTimeFormat"])</span>
                                            @if (Model.ConfirmDate != null)
                                            {
                                                <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Ngày xác nhận: </lable> @Model.ConfirmDate.Value.ToString(Configuration["DateTimeFormat"])</span>
                                            }
                                            @if (Model.SendDate != null)
                                            {
                                                <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Ngày gửi: </lable> @Model.SendDate.Value.ToString(Configuration["DateTimeFormat"])</span>
                                            }
                                            @if (Model.ReceiveDate != null)
                                            {
                                                <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Ngày nhận: </lable> @Model.ReceiveDate.Value.ToString(Configuration["DateTimeFormat"])</span>
                                            }
                                            @if (Model.CancelDate != null)
                                            {
                                                <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Ngày trả: </lable> @Model.CancelDate.Value.ToString(Configuration["DateTimeFormat"])</span>
                                            }
                                            Ghi chú: @Model.Note
                                        </div>
                                    </div>

                                    <div class="info-box bg-light">
                                        <div class="info-box-content">
                                            <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Khách hàng: </lable> @Model.CustomerName</span>
                                            <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Điện thoại: </lable> @Model.CustomerPhone</span>
                                            <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Địa chỉ: </lable> @Model.CustomerAddress</span>
                                            <hr />
                                            <button type="button" class="btn btn-success btn-xs" @onclick="() => UpdateOrderCustomerControl.Show(Model)">Sửa thông tin người nhận</button>
                                        </div>
                                    </div>
                                </div>
                                <div class="col">

                                    <div class="info-box bg-light">
                                        <div class="info-box-content">
                                            @if (Delivery != null && Delivery.OrderId != Guid.Empty)
                                            {
                                                <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Đơn vị giao hàng: </lable> @Delivery.DeliveryName</span>
                                                <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Mã đơn hàng: </lable> @Delivery.DeliveryCode</span>
                                                <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Phí giao hàng: </lable> @Delivery.DeliveryFee.ToString("N0")</span>
                                                <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Thu hộ (COD): </lable> @(Delivery.COD ? "Có" : "Không")</span>
                                                <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Ghi chú: </lable> @Delivery.DeliveryNote</span>
                                                <hr />
                                                <div class="row">
                                                    <div class="col text-center">
                                                        <button type="button" class="btn btn-success btn-xs" @onclick="() => EditDeliveryControl.Show(Model.Id, Delivery)">Sửa đơn vị vận chuyển</button>
                                                    </div>
                                                    <div class="col text-center">
                                                        <button type="button" class="btn btn-danger btn-xs" @onclick="OpenDeleteOrderDiliveryConfirm">Bỏ đơn vị vận chuyển</button>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <button type="button" class="btn btn-primary" data-toggle="modal" @onclick="() => EditDeliveryControl.Show(Model.Id, Delivery)">Thêm đơn vị vận chuyển</button>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card card-outline card-info">
                        <div class="card-body">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th colspan="2">Sản phẩm</th>
                                        <th>Đơn giá</th>
                                        <th>Số lượng</th>
                                        <th>Thành tiền</th>
                                        @if (Model.ConfirmDate == null)
                                        {
                                            <th style="text-align:right"><button class="btn btn-primary btn-xs" type="button" @onclick="() => ListProductControl.Show()">Thêm</button></th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach(var product in Products)
                                    {
                                    <tr>
                                        <td>
                                            @product.Name
                                                <br /> @product.Properties
                                        </td>
                                        <td style="text-align:center"><img src="@(BackendApiUrl + "/" + product.Image.FullPath)" asp-append-version="true" width="50px" /></td>
                                            <td style="text-align:right">@product.Price.ToString("N0")</td>
                                            <td style="text-align:right">@product.Quantity</td>
                                            <td style="text-align:right">@product.TotalCost.ToString("N0")</td>
                                            @if (Model.ConfirmDate == null)
                                        {
                                            <td style="text-align:right">
                                                <button class="btn btn-success btn-xs" @onclick="()=> UpdateOrderProduct.Show(Model.Id, product)">Sửa</button>
                                                <button class="btn btn-danger btn-xs" @onclick="() => OpenDeleteOrderProductConfirm(product.ProductId)">Xóa</button>
                                            </td>
                                        }
                                    </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td colspan="3">Tổng:</td>
                                        <td style="text-align:right">@Products.Sum(e => e.Quantity)</td>
                                        <td style="text-align:right">@Products.Sum(e => e.TotalCost).ToString("N0")</td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (Model.ConfirmDate == null)
                    {
                        <button type="submit" class="btn btn-success btn-xs" @onclick="() => OnConfirm(Model.Id)" style="margin-right:10px">Xác nhận</button>
                        <button type="button" class="btn btn-danger btn-xs" @onclick="OpenDeleteOrderConfirm">Xóa</button>
                    }
                    else if (Model.SendDate == null)
                    {
                        <button type="submit" class="btn btn-success btn-xs" @onclick="() => OnSend(Model.Id)" style="margin-right:10px">Gửi</button>
                        <button type="button" class="btn btn-danger btn-xs" @onclick="OpenDeleteOrderConfirm">Xóa</button>
                    }
                    else
                    {
                        @if (Model.ReceiveDate == null)
                        {
                            <button type="submit" class="btn btn-success btn-xs" @onclick="() => OnReceive(Model.Id)" style="margin-right:10px">Nhận</button>
                        }
                        @if (Model.CancelDate == null)
                        {
                            <button type="submit" class="btn btn-success btn-xs" @onclick="() => OnCancel(Model.Id)" style="margin-right:10px">Trả</button>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
    <Confirmation @ref="DeleteConfirmation" ConfirmationChanged="OnConfirmDelete"> </Confirmation>

    <ProductListPopup @ref="ListProductControl" EventCallbak="SelectProduct"></ProductListPopup>
    <OrderProductUpdate @ref="UpdateOrderProduct" CloseEventCallback="LoadData"></OrderProductUpdate>
    <OrderDeliveryEdit @ref="EditDeliveryControl" CloseEventCallback="LoadData"></OrderDeliveryEdit>
    <OrderCustomerUpdate @ref="UpdateOrderCustomerControl" CloseEventCallback="LoadData"></OrderCustomerUpdate>
}

@code {
    private string BackendApiUrl { get; set; }

    protected bool ShowBox { get; set; }
    private OrderDetailDto Model { get; set; }
    private OrderDeliveryDto Delivery { get; set; }
    private List<OrderProductDto> Products { set; get; } = new List<OrderProductDto>();

    protected Confirmation DeleteConfirmation { set; get; }
    private string DeleteType { set; get; }
    private Guid DeleteProductId { set; get; }

    [Parameter]
    public EventCallback EventCallback { get; set; }

    private OrderDeliveryEdit EditDeliveryControl { get; set; }
    private ProductListPopup ListProductControl { get; set; }
    private OrderProductUpdate UpdateOrderProduct { set; get; }
    private OrderCustomerUpdate UpdateOrderCustomerControl { set; get; }

    protected async override Task OnInitializedAsync()
    {
        BackendApiUrl = Configuration["BackendApiUrl"];
        Model = new OrderDetailDto();
    }

    public async Task LoadData()
    {
        Model = await OrderApiClient.GetOrder(Model.Id);
        Delivery = await OrderApiClient.GetOrderDelivery(Model.Id);
        Products = await OrderApiClient.GetOrderProducts(Model.Id);
        StateHasChanged();
    }

    public async Task Show(Guid id)
    {
        ShowBox = true;
        Model.Id = id;

        await LoadData();
    }

    private void Hide()
    {
        ShowBox = false;
        StateHasChanged();
    }

    public void OpenDeleteOrderConfirm()
    {
        DeleteType = "ORDER";
        DeleteConfirmation.ConfirmationTitle = "Xóa đơn hàng";
        DeleteConfirmation.ConfirmationMessage = "Bạn có chắc chắn xóa đơn hàng này?";
        DeleteConfirmation.Show();
        StateHasChanged();
    }
    public void OpenDeleteOrderDiliveryConfirm()
    {
        DeleteType = "DELIVERY";
        DeleteConfirmation.ConfirmationTitle = "Xóa đơn vị vận chuyển";
        DeleteConfirmation.ConfirmationMessage = "Bạn có chắc chắn hủy đơn vị vận chuyển của đơn hàng này?";
        DeleteConfirmation.Show();
        StateHasChanged();
    }
    public void OpenDeleteOrderProductConfirm(Guid priductId)
    {
        DeleteProductId = priductId;
        DeleteType = "PRODUCT";
        DeleteConfirmation.ConfirmationTitle = "Xóa sản phẩm";
        DeleteConfirmation.ConfirmationMessage = "Bạn có chắc chắn xóa sản phẩm này?";
        DeleteConfirmation.Show();
        StateHasChanged();
    }

    protected async Task SelectProduct(ProductDto product)
    {
        var orderProduct = new OrderProductDto
            {
                Image = product.Image,
                Name = product.Titles.Where(e => e.Key == "vi").Select(e => e.Value).FirstOrDefault(),
                Price = product.Price,
                Quantity = 1,
                ProductId = product.Id
            };
        var result = await OrderApiClient.CreateOrderProduct(Model.Id, orderProduct);
        if (result)
        {
            ToastService.ShowInfo($"Thêm sản phẩm thành công");
            await LoadData();
        }
        else ToastService.ShowError($"Thêm sản phẩm không thành công");
    }

    public async Task OnConfirmDelete(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            var result = false;

            switch(DeleteType)
            {
                case "ORDER":
                    result = await OrderApiClient.DeleteOrder(Model.Id);
                    if (result)
                    {
                        await EventCallback.InvokeAsync();
                        ShowBox = false;
                    }
                    break;
                case "PRODUCT":
                    result = await OrderApiClient.DeleteOrderProduct(Model.Id, DeleteProductId);
                    if (result)
                    {
                        await LoadData();
                    }
                    break;
                case "DELIVERY":
                    result = await OrderApiClient.DeleteOrderDelivery(Model.Id);
                    if (result)
                    {
                        await LoadData();
                    }
                    break;
            }
        }
    }

    public async Task OnConfirm(Guid id)
    {
        var result = await OrderApiClient.ConfirmOrder(id);
        if (result)
        {
            await EventCallback.InvokeAsync();
            Hide();
        }
    }
    public async Task OnSend(Guid id)
    {
        var result = await OrderApiClient.SendOrder(id);
        if (result)
        {
            await EventCallback.InvokeAsync();
            Hide();
        }
    }
    public async Task OnReceive(Guid id)
    {
        var result = await OrderApiClient.ReceiveOrder(id);
        if (result)
        {
            await EventCallback.InvokeAsync();
            Hide();
        }
    }
    public async Task OnCancel(Guid id)
    {
        var result = await OrderApiClient.CancelOrder(id);
        if (result)
        {
            await EventCallback.InvokeAsync();
            Hide();
        }
    }
}