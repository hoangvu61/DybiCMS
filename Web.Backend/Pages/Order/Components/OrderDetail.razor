@using Web.Backend.Components;
@using Web.Backend.Services;
@using Web.Models;
@using Web.Models.Enums;
@using Web.Models.SeedWork;
@using Blazored.TextEditor;

@inject IToastService ToastService;
@inject IOrderApiClient OrderApiClient;
@inject IConfiguration Configuration;

@if (ShowBox && Model != null)
{
    <EditForm Model="Model">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="card card-outline card-info">
            <div class="card-header">
                <h3 class="card-title">Đơn hàng: <strong>@Model.Id</strong></h3>
                <div style="float:right">
                    @if (Model.ConfirmDate == null)
                    {
                        <button type="submit" class="btn btn-success btn-xs" @onclick="() => OnConfirm(Model.Id)" style="margin-right:10px">Xác nhận</button>
                    }
                    @if (Model.SendDate == null)
                    {
                        <button type="submit" class="btn btn-success btn-xs" @onclick="() => OnSend(Model.Id)" style="margin-right:10px">Gửi</button>
                    }
                    @if (Model.ReceiveDate == null)
                    {
                        <button type="submit" class="btn btn-success btn-xs" @onclick="() => OnReceive(Model.Id)" style="margin-right:10px">Nhận</button>
                    }
                    @if (Model.CancelDate == null)
                    {
                        <button type="submit" class="btn btn-success btn-xs" @onclick="() => OnCancel(Model.Id)" style="margin-right:10px">Trả</button>
                    }
                    <button type="button" class="btn btn-danger btn-xs" @onclick="OpenDeleteOrderConfirm">Xóa</button>
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col">
                        <div class="info-box bg-light">
                            <div class="info-box-content">
                                <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Khách hàng: </lable> @Model.CustomerName</span>
                                <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Điện thoại: </lable> @Model.CustomerPhone</span>
                                <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Địa chỉ: </lable> @Model.CustomerAddress</span>
                            </div>
                        </div>
                    </div>
                    <div class="col">
                        <div class="info-box bg-light">
                            <div class="info-box-content">
                                <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Ngày tạo: </lable> @Model.CreateDate.ToString(Configuration["DateTimeFormat"])</span>
                                @if (Model.ConfirmDate != null)
                                {
                                    <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Ngày xác nhận: </lable> @Model.ConfirmDate.Value.ToString(Configuration["DateTimeFormat"])</span>
                                }
                                @if (Model.SendDate != null)
                                {
                                    <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Ngày gửi: </lable> @Model.SendDate.Value.ToString(Configuration["DateTimeFormat"])</span>
                                }
                                @if (Model.ReceiveDate != null)
                                {
                                    <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Ngày nhận: </lable> @Model.ReceiveDate.Value.ToString(Configuration["DateTimeFormat"])</span>
                                }
                                @if (Model.CancelDate != null)
                                {
                                    <span class="info-box-text text-center text-muted" style="text-align:left !important"><lable>Ngày trả: </lable> @Model.CancelDate.Value.ToString(Configuration["DateTimeFormat"])</span>
                                }
                                Ghi chú: @Model.Note
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card card-outline card-info">
            <div class="card-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th colspan="2">Sản phẩm</th>
                            <th>Đơn giá</th>
                            <th>Số lượng</th>
                            <th>Thành tiền</th>
                            @if (Model.ConfirmDate == null)
                            {
                                <th style="text-align:right"><button class="btn btn-primary btn-xs" type="button" @onclick="() => ListProductControl.Show()">Thêm</button></th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(var product in Products)
                        {
                        <tr>
                            <td>
                                @product.Name
                                    <br /> @product.Properties
                            </td>
                            <td style="text-align:center"><img src="@(BackendApiUrl + "/" + product.Image.FullPath)" asp-append-version="true" width="50px" /></td>
                                <td style="text-align:right">@product.Price.ToString("N0")</td>
                                <td style="text-align:right">@product.Quantity</td>
                                <td style="text-align:right">@product.TotalCost.ToString("N0")</td>
                                @if (Model.ConfirmDate == null)
                            {
                                <td style="text-align:right">
                                    <button class="btn btn-success btn-xs" @onclick="()=> UpdateOrderProduct.Show(OrderId, product)">Sửa</button>
                                    <button class="btn btn-danger btn-xs" @onclick="() => OpenDeleteOrderProductConfirm(product.ProductId)">Xóa</button>
                                </td>
                            }
                        </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="3">Tổng:</td>
                            <td style="text-align:right">@Products.Sum(e => e.Quantity)</td>
                            <td style="text-align:right">@Products.Sum(e => e.TotalCost).ToString("N0")</td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </EditForm>
    <Confirmation ConfirmationMessage="Bạn có chắc chắn xóa?" ConfirmationTitle="Xóa đơn hàng" @ref="DeleteConfirmation" ConfirmationChanged="OnConfirmDelete"> </Confirmation>

    <ProductListPopup @ref="ListProductControl" EventCallbak="SelectProduct"></ProductListPopup>
    <OrderProductUpdate @ref="UpdateOrderProduct" CloseEventCallback="LoadData"></OrderProductUpdate>
}

@code {
    private string BackendApiUrl { get; set; }
    private Guid OrderId { get; set; }

    protected bool ShowBox { get; set; }
    private OrderDetailDto Model { get; set; }
    private List<OrderProductDto> Products { set; get; } = new List<OrderProductDto>();

    protected Confirmation DeleteConfirmation { set; get; }
    private bool DeleteOrrder { set; get; }
    private Guid DeleteProductId { set; get; }

    [Parameter]
    public EventCallback EventCallback { get; set; }

    private ProductListPopup ListProductControl { get; set; }
    private OrderProductUpdate UpdateOrderProduct { set; get; }

    protected async override Task OnInitializedAsync()
    {
    }

    public async Task LoadData()
    {
        BackendApiUrl = Configuration["BackendApiUrl"];
        Model = await OrderApiClient.GetOrder(OrderId);
        Products = await OrderApiClient.GetOrderProducts(OrderId);
        StateHasChanged();
    }

    public async Task Show(Guid id)
    {
        ShowBox = true;
        OrderId = id;
        await LoadData();
    }

    private void Hide()
    {
        ShowBox = false;
        StateHasChanged();
    }

    public void OpenDeleteOrderConfirm()
    {
        DeleteOrrder = true;
        DeleteConfirmation.Show();
    }
    public void OpenDeleteOrderProductConfirm(Guid priductId)
    {
        DeleteProductId = priductId;
        DeleteOrrder = false;
        DeleteConfirmation.Show();
    }

    protected async Task SelectProduct(ProductDto product)
    {
        var orderProduct = new OrderProductDto
            {
                Image = product.Image,
                Name = product.Titles.Where(e => e.Key == "vi").Select(e => e.Value).FirstOrDefault(),
                Price = product.Price,
                Quantity = 1,
                ProductId = product.Id
            };
        var result = await OrderApiClient.CreateOrderProduct(OrderId, orderProduct);
        if (result)
        {
            ToastService.ShowInfo($"Thêm sản phẩm thành công");
            await LoadData();
        }
        else ToastService.ShowError($"Thêm sản phẩm không thành công");
    }

    public async Task OnConfirmDelete(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            var result = false;

            if (DeleteOrrder)
            {
                result = await OrderApiClient.DeleteOrder(OrderId);
                if (result)
                {
                    await EventCallback.InvokeAsync();
                    ShowBox = false;
                }
            }
            else
            {
                result = await OrderApiClient.DeleteOrderProduct(OrderId, DeleteProductId);
                if (result)
                {
                    await LoadData();
                }
            }
        }
    }

    public async Task OnConfirm(Guid id)
    {
        var result = await OrderApiClient.ConfirmOrder(id);
        if (result) await EventCallback.InvokeAsync();
    }
    public async Task OnSend(Guid id)
    {
        var result = await OrderApiClient.SendOrder(id);
        if (result) await EventCallback.InvokeAsync();
    }
    public async Task OnReceive(Guid id)
    {
        var result = await OrderApiClient.ReceiveOrder(id);
        if (result) await EventCallback.InvokeAsync();
    }
    public async Task OnCancel(Guid id)
    {
        var result = await OrderApiClient.CancelOrder(id);
        if (result) await EventCallback.InvokeAsync();
    }
}